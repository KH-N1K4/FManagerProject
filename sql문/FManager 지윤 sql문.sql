------------------------------------------------------------------------------------------------------------
--서비스 등록하기 카테고리 1,3 들고오기
SELECT * FROM MAIN_CATEGORY;

SELECT THIRD_CATEGORY_NO,THIRD_CATEGORY_NAME,MAIN_CATEGORY_NO 
FROM CATEGORY 
JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO)
ORDER BY 1;

---서비스 등록하기 서비스 데이터 삽입
INSERT INTO "SERVICE"
VALUES(SEQ_SERVICE_NO.NEXTVAL,#{},#{},#{},#{},#{},#{},DEFAULT,DEFAULT,#{},#{})

----서비스 테이블에서 데이터 들고 오기 --서비스 연관 첨부파일도 처음 하나만 들고오기(메인사진으로 들고 올거임)
SELECT SERVICE_NO,SERVICE_TITLE,SERVICE_SUMMARY,SERNICE_CONTENT,SERVICE_PRICE,TO_CHAR(SERVICE_PRICE, 'FM999,999,999,999') SERVICE_PRICE_STRING, SERVICE_EDIT_NUM,
SERVICE_WORK_PERIOD,SERVICE_STATUS,SERVICE_CREATE_DATE,THIRD_CATEGORY_NO,FREELANCER_NO,REQUEST_FILE_NO,REQUEST_FILE_PATH
FROM SERVICE
LEFT JOIN (SELECT s.*,
ROW_NUMBER() OVER (PARTITION BY SERVICE_NO ORDER BY REQUEST_FILE_NO) rum
FROM SERVICE_FILE s) USING(SERVICE_NO)
WHERE RUM = 1
AND SERVICE_STATUS NOT IN (5)
AND FREELANCER_NO = 30;

--TO_CHAR(SERVICE_PRICE, 'FM999,999,999,999') 스트링 형식
--1:승인 대기 중, 2:판매 중, 3:미승인, 4:판매 중지,5: 의뢰용일회성서비스
SELECT SERVICE_NO,SERVICE_TITLE,SERVICE_SUMMARY,SERNICE_CONTENT,SERVICE_PRICE,TO_CHAR(SERVICE_PRICE, 'FM999,999,999,999') SERVICE_PRICE_STRING, 
	SERVICE_EDIT_NUM,SERVICE_WORK_PERIOD,
	SERVICE_STATUS,
	CASE WHEN SERVICE_STATUS = 1 THEN '승인대기 중'
	     WHEN SERVICE_STATUS = 2 THEN '판매 중'
	     WHEN SERVICE_STATUS = 3 THEN '미승인'
	     WHEN SERVICE_STATUS = 4 THEN '판매 중지'
	END AS SERVICE_STATUS_STRING
	,SERVICE_CREATE_DATE,THIRD_CATEGORY_NO,FREELANCER_NO,REQUEST_FILE_NO,REQUEST_FILE_PATH
FROM SERVICE
LEFT JOIN (SELECT s.*,
ROW_NUMBER() OVER (PARTITION BY SERVICE_NO ORDER BY REQUEST_FILE_NO) rum
FROM SERVICE_FILE s) USING(SERVICE_NO)
WHERE RUM = 1
AND SERVICE_DEL_FL = 'N'
AND SERVICE_STATUS NOT IN (5)
AND FREELANCER_NO = 30;

--메인 1카테고리 연결해서 메인1 카테고리 별 정렬
SELECT SERVICE_NO,SERVICE_TITLE,SERVICE_SUMMARY,SERNICE_CONTENT,SERVICE_PRICE,TO_CHAR(SERVICE_PRICE, 'FM999,999,999,999') SERVICE_PRICE_STRING, 
	SERVICE_EDIT_NUM,SERVICE_WORK_PERIOD,
	SERVICE_STATUS,SERVICE_DEL_FL,
	CASE WHEN SERVICE_STATUS = 1 THEN '승인대기 중'
	     WHEN SERVICE_STATUS = 2 THEN '판매 중'
	     WHEN SERVICE_STATUS = 3 THEN '미승인'
	     WHEN SERVICE_STATUS = 4 THEN '판매 중지'
	END AS SERVICE_STATUS_STRING
	,SERVICE_CREATE_DATE,THIRD_CATEGORY_NO,FREELANCER_NO,REQUEST_FILE_NO,REQUEST_FILE_PATH,MAIN_CATEGORY_NO
FROM (SELECT * 
	FROM SERVICE
	LEFT JOIN CATEGORY USING(THIRD_CATEGORY_NO)
	LEFT JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO))
LEFT JOIN (SELECT s.*,
ROW_NUMBER() OVER (PARTITION BY SERVICE_NO ORDER BY REQUEST_FILE_NO) rum
FROM SERVICE_FILE s) USING(SERVICE_NO)
WHERE RUM = 1
AND SERVICE_STATUS NOT IN (5)
AND SERVICE_DEL_FL = 'N'
AND FREELANCER_NO = 30;
AND MAIN_CATEGORY_NO = 2;
-----------------------------------------------------------------------
--거래 데이터 삽입
INSERT INTO "TRADE"
VALUES(SEQ_TRADE_NO.NEXTVAL,DEFAULT,DEFAULT,2,17);
--정산 내역 데이터 삽입
INSERT INTO "SETTLEMENT"
VALUES(SEQ_SETTLEMENT_NO.NEXTVAL,1,17,1,SYSDATE,1210000,SEQ_TRADE_NO.CURRVAL);

--거래 데이터 삽입
INSERT INTO "TRADE"
VALUES(SEQ_TRADE_NO.NEXTVAL,DEFAULT,DEFAULT,16,64,'잡음 없이 깔끔하게만 해주세요');
--정산 내역 데이터 삽입
INSERT INTO "SETTLEMENT"
VALUES(SEQ_SETTLEMENT_NO.NEXTVAL,1,64,1,SYSDATE,500000,SEQ_TRADE_NO.CURRVAL);

--거래 데이터 삽입
INSERT INTO "TRADE"
VALUES(SEQ_TRADE_NO.NEXTVAL,DEFAULT,DEFAULT,22,13,'안ㅇ련ㅇㄹ먼이ㅏㅗㄹ홀ㅇㄴㄻㅇㄹㅇㄴ홀리');
--정산 내역 데이터 삽입
INSERT INTO "SETTLEMENT"
VALUES(SEQ_SETTLEMENT_NO.NEXTVAL,1,13,1,SYSDATE,300000,SEQ_TRADE_NO.CURRVAL);

--거래 데이터 삽입
INSERT INTO "TRADE"
VALUES(SEQ_TRADE_NO.NEXTVAL,DEFAULT,DEFAULT,3,17);
--정산 내역 데이터 삽입
INSERT INTO "SETTLEMENT"
VALUES(SEQ_SETTLEMENT_NO.NEXTVAL,1,17,1,SYSDATE,2560000,SEQ_TRADE_NO.CURRVAL);
--작업물 발송 내역 데이터 삽입
INSERT INTO "WORK"
VALUES(SEQ_WORK_NO.NEXTVAL,DEFAULT,1);


SELECT * FROM TRADE;
SELECT * FROM SETTLEMENT;

---------제안 보내기
INSERT INTO "PROJECT_PROPOSAL"
VALUES(SEQ_PROJECT_PROPOSAL_NO.NEXTVAL,DEFAULT,8000000,7,DEFAULT,37,30);

SELECT SEQ_REQUEST_FILE_NO.NEXTVAL FROM DUAL;--시퀀스 되돌리기기
ALTER SEQUENCE SEQ_REQUEST_FILE_NO INCREMENT BY -2;
ALTER SEQUENCE SEQ_REQUEST_FILE_NO INCREMENT BY 1;
-----------------------------------------------------------------------------------------------------
--거래별 서비스 테이블이랑 조인해서 선택해오기
--1:진행 중, 2: 작업 완료
SELECT t.*,
	CASE WHEN FREELANCER_DONE_FL = 1 THEN '진행 중'
	     WHEN FREELANCER_DONE_FL = 2 THEN '작업 완료'
	     WHEN FREELANCER_DONE_FL = 3 THEN '주문 취소'
	END AS FREELANCER_DONE_FL_STRING
FROM (SELECT * FROM TRADE
	JOIN (SELECT * 
		FROM SERVICE
		LEFT JOIN CATEGORY USING(THIRD_CATEGORY_NO)
		LEFT JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO)) USING(SERVICE_NO)
	JOIN (SELECT MEMBER_NO,MEMBER_NICKNAME,MEMBER_NAME FROM "MEMBER") USING(MEMBER_NO)) t
WHERE FREELANCER_NO = 80
ORDER BY TRADE_NO;
AND MAIN_CATEGORY_NO = 2 
AND FREELANCER_DONE_FL = 1
AND SERVICE_TITLE LIKE '%제작%';
------------------------------------------------------------------------------------------------
--거래별 서비스 테이블이랑 조인해서 선택해오기 --- 작업물 발송 횟수 들고오기  --최종!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   페이지 처리 LIST 도 수정
--1:진행 중, 2: 작업 완료
SELECT t.*,
	CASE WHEN FREELANCER_DONE_FL = 1 THEN '진행 중'
	     WHEN FREELANCER_DONE_FL = 2 THEN '작업 완료'
	     WHEN FREELANCER_DONE_FL = 3 THEN '주문 취소'
	     WHEN WORK_STATUS = 3 THEN '주문 취소'
	     WHEN WORK_STATUS = 2 THEN '정산 완료'
	END AS FREELANCER_DONE_FL_STRING,
	CASE WHEN WORK_STATUS = 3 THEN '주문 취소'
	     WHEN WORK_STATUS = 2 THEN '정산 완료'
	END AS WORK_STATUS_STRING
FROM (SELECT * FROM TRADE
	LEFT JOIN (SELECT * --혹시 경력 같은 거 여쭤봐도 될까요??
		FROM SERVICE
		LEFT JOIN CATEGORY USING(THIRD_CATEGORY_NO)
		LEFT JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO)) USING(SERVICE_NO)
	LEFT JOIN (SELECT TRADE_NO, NVL(WORK_COUNT,0) WORK_COUNT
		FROM TRADE 
		LEFT JOIN (SELECT COUNT(*) WORK_COUNT,TRADE_NO 
			FROM TRADE
			JOIN "WORK" USING(TRADE_NO)
			GROUP BY TRADE_NO) USING (TRADE_NO)) USING (TRADE_NO) 
	JOIN (SELECT MEMBER_NO,MEMBER_NICKNAME,MEMBER_NAME FROM "MEMBER") USING(MEMBER_NO)
	JOIN "SETTLEMENT" USING(TRADE_NO)
	LEFT JOIN (SELECT TRADE_REPORT_NO,REPORT_PERSON,REPORTED_PERSON,
		TRADE_REPORT_TYPE_NO,TRADE_NO,TRADE_REPORT_CONTENT,TRADE_REPORT_FILE_PATH,REFUND_FL,TRADE_REPORT_CREATE_DATE
		FROM TRADE_REPORT LEFT JOIN FREELANCER ON(REPORT_PERSON = FREELANCER_NO)) USING(TRADE_NO)) t
WHERE FREELANCER_NO = 101
AND PAYMENT_TYPE = 1
ORDER BY TRADE_NO;
AND MAIN_CATEGORY_NO = 2 
AND FREELANCER_DONE_FL = 1
AND SERVICE_TITLE LIKE '%제작%';
---------------------------------------------------------------------------
SELECT COUNT(*)
FROM (SELECT * FROM TRADE
	JOIN (SELECT * 
		FROM SERVICE
		LEFT JOIN CATEGORY USING(THIRD_CATEGORY_NO)
		LEFT JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO)) USING(SERVICE_NO)
	LEFT JOIN (SELECT TRADE_NO, NVL(WORK_COUNT,0) WORK_COUNT
		FROM TRADE 
		LEFT JOIN (SELECT COUNT(*) WORK_COUNT,TRADE_NO 
			FROM TRADE
			JOIN "WORK" USING(TRADE_NO)
			GROUP BY TRADE_NO) USING (TRADE_NO)) USING (TRADE_NO) 
	JOIN (SELECT MEMBER_NO,MEMBER_NICKNAME,MEMBER_NAME FROM "MEMBER") USING(MEMBER_NO)
	JOIN "SETTLEMENT" USING(TRADE_NO)
	LEFT JOIN TRADE_REPORT USING(TRADE_NO) WHERE REPORT_PERSON = FREELANCER_NO OR REPORT_PERSON IS null)
WHERE FREELANCER_NO = 30
AND PAYMENT_TYPE = 1
AND (TRADE_REPORT_TYPE_NO IS NULL OR TRADE_REPORT_TYPE_NO = 1);
---------------------------------------------------------------------------------------------
SELECT TRADE_NO, NVL(WORK_COUNT,0) WORK_COUNT
FROM TRADE 
LEFT JOIN (SELECT COUNT(*) WORK_COUNT,TRADE_NO 
		FROM TRADE
		JOIN "WORK" USING(TRADE_NO)
		GROUP BY TRADE_NO) USING (TRADE_NO);
----------------------------------------------------------------------------
----환불 상태에 따라 주문 취소 나타내기
SELECT t.*,
	CASE WHEN FREELANCER_DONE_FL = 1 THEN '진행 중'
	     WHEN FREELANCER_DONE_FL = 2 THEN '작업 완료'
	     WHEN WORK_STATUS = 3 THEN '주문 취소'
	END AS FREELANCER_DONE_FL_STRING
FROM (SELECT * FROM TRADE
	JOIN (SELECT * 
		FROM SERVICE
		LEFT JOIN CATEGORY USING(THIRD_CATEGORY_NO)
		LEFT JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO)) USING(SERVICE_NO)
	JOIN SETTLEMENT USING(TRADE_NO)
	JOIN (SELECT MEMBER_NO,MEMBER_NICKNAME,MEMBER_NAME FROM "MEMBER") USING(MEMBER_NO)) t
WHERE FREELANCER_NO = 30
ORDER BY TRADE_NO;
AND MAIN_CATEGORY_NO = 2 
AND FREELANCER_DONE_FL = 1
AND SERVICE_TITLE LIKE '%제작%';

------------------------------------------------------------
--신고테이블 삽입 ---------------------------------------------------------------------------------수정!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  1번 추가
INSERT INTO "TRADE_REPORT"
VALUES(SEQ_TRADE_REPORT_NO.NEXTVAL,#{신고자},#{피신고자},#{내용},DEFAULT,#{파일경로},#{거래번호},1);
INSERT INTO "TRADE_REPORT" 
(TRADE_REPORT_NO, REPORT_PERSON, REPORTED_PERSON,TRADE_REPORT_CONTENT,REFUND_FL,TRADE_NO,TRADE_REPORT_TYPE_NO) 
VALUES 
(SEQ_TRADE_REPORT_NO.NEXTVAL,#{신고자},#{피신고자},#{내용},DEFAULT,#{파일경로},#{거래번호},1)


--1초에 한번씩 요구사항이 변경되면서 전화를 하루에 50번 이상 오셔서 거래 안하고 싶어요
--돈 하나도 안 받아도 상관 없으니까 제발 거래 취소해주세요!

DELETE FROM "SETTLEMENT"
WHERE SETTLEMENT_NO =55;

--SEQ_WORK_NO--SEQ_TRADE_REPORT_NO
SELECT SEQ_CAREER_NO.NEXTVAL FROM DUAL;--시퀀스 되돌리기기
ALTER SEQUENCE SEQ_CAREER_NO INCREMENT BY -1;
ALTER SEQUENCE SEQ_CAREER_NO INCREMENT BY 1;

COMMIT;
-------------------------------------------------------------------------------
--거래 테이블에서 의뢰인,프리랜서 둘다 작업 완료가 되면 정산 내역 테이블 같은 거래 번호일 떄 작업 상태 마감으로 변경 해주는 트리거 2개 
--DROP TRIGGER DONEFL_WORK_STATUS;
CREATE OR REPLACE TRIGGER DONEFL_WORK_STATUS
AFTER 
UPDATE OF MEMBER_DONE_FL,FREELANCER_DONE_FL ON TRADE
FOR EACH ROW
WHEN (OLD.FREELANCER_DONE_FL = 2 AND NEW.MEMBER_DONE_FL = 2)
--WHEN (OLD.MEMBER_DONE_FL = 2 AND NEW.FREELANCER_DONE_FL = 2)
BEGIN
	  UPDATE SETTLEMENT
	  SET WORK_STATUS = 4   --마감
	  WHERE TRADE_NO =:OLD.TRADE_NO;
END;

----------------------------------------------------------------------------
CREATE OR REPLACE TRIGGER DONEFL_WORK_STATUS2
AFTER 
UPDATE OF MEMBER_DONE_FL,FREELANCER_DONE_FL ON TRADE
FOR EACH ROW
WHEN (OLD.MEMBER_DONE_FL = 2 AND NEW.FREELANCER_DONE_FL = 2)
BEGIN
	  UPDATE SETTLEMENT
	  SET WORK_STATUS = 4   --마감
	  WHERE TRADE_NO =:OLD.TRADE_NO;
END;
----------------------------------------------------------------
UPDATE TRADE
SET FREELANCER_DONE_FL = 2   --작업완료 상태로 변경
WHERE TRADE_NO =2;
------------------------------------------------------------------------------
INSERT INTO "PROJECT_REQUEST" 
VALUES (SEQ_PROJECT_REQUEST_NO.NEXTVAL,'홈페이지 디지인','회사 홈페이지 디자인 원해요.','식품 회사 홈페이지 디자인 원합니다.<br> 회사에 어울리는 컬러 선택이랑 상세히 같이 의논하면서 디자인해줄 사람이 좋아요.',
5000000,'2023-01-10','2023-04-01',90,DEFAULT,9,22);
INSERT INTO "REQUEST_FILE" 
VALUES (SEQ_REQUEST_FILE_NO.NEXTVAL,'/resources/files/myProjectService/식품회사.jpg',1,SEQ_PROJECT_REQUEST_NO.CURRVAL);
INSERT INTO "REQUEST_FILE" 
VALUES (SEQ_REQUEST_FILE_NO.NEXTVAL,'/resources/files/myProjectService/식품회사2.jpg',1,SEQ_PROJECT_REQUEST_NO.CURRVAL);
INSERT INTO "REQUEST_FILE" 
VALUES (SEQ_REQUEST_FILE_NO.NEXTVAL,'/resources/files/myProjectService/식품회사3.jpg',1,SEQ_PROJECT_REQUEST_NO.CURRVAL);
INSERT INTO "PROJECT_PROPOSAL" 
VALUES (SEQ_PROJECT_PROPOSAL_NO.NEXTVAL,DEFAULT,4500000,6,DEFAULT,SEQ_PROJECT_REQUEST_NO.CURRVAL,30);
--------------------------------------------------------------------------------------------------------------
---보낸 제안 가져오기
-- 예산 금액 돈 형태으로 변경해주기 1번 PROJECT_REQUEST_BUDGET
-- 날짜 2022.01.03 형식      TO_DATE(REQUEST_RECRUIT_DATE, 'YYYY.MM.DD')
-- PROPOSAL_ADOPT_STATUS 1:대기중 2:채택 3: 모집마감7
SELECT p.*,TO_CHAR(PROPOSAL_PRICE, 'FM999,999,999,999') PROPOSAL_PRICE_STRING,
		CASE WHEN PROPOSAL_ADOPT_STATUS = 1 THEN '대기중'
		     WHEN PROPOSAL_ADOPT_STATUS = 2 THEN '채택'
		     WHEN PROPOSAL_ADOPT_STATUS = 3 THEN '모집마감'
		END AS PROPOSAL_ADOPT_STATUS_STRING
FROM (SELECT * FROM PROJECT_PROPOSAL 
LEFT JOIN (SELECT PROJECT_REQUEST_NO,PROJECT_REQUEST_TITLE,
	PROJECT_REQUEST_SUMMARY,PROJECT_REQUEST_CONTENT,TO_CHAR(PROJECT_REQUEST_BUDGET, 'FM999,999,999,999') PROJECT_REQUEST_BUDGET,
	TO_CHAR(REQUEST_RECRUIT_DATE, 'YYYY.MM.DD') REQUEST_RECRUIT_DATE,TO_CHAR(REQUEST_WORK_DATE, 'YYYY.MM.DD') REQUEST_WORK_DATE,
	PROJECT_WORK_PERIOD,TO_CHAR(PROJECT_REQUEST_CREATE_DATE, 'YYYY.MM.DD') PROJECT_REQUEST_CREATE_DATE,
	THIRD_CATEGORY_NO,MEMBER_NO
	FROM PROJECT_REQUEST) USING (PROJECT_REQUEST_NO)
LEFT JOIN CATEGORY USING(THIRD_CATEGORY_NO)
LEFT JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO)
LEFT JOIN MAIN_CATEGORY USING(MAIN_CATEGORY_NO)
LEFT JOIN REQUEST_FILE USING(PROJECT_REQUEST_NO)) p
WHERE FREELANCER_NO = 30
AND REQUEST_FILE_ORDER = 0
ORDER BY PROJECT_REQUEST_NO;


SELECT * FROM REQUEST_FILE
WHERE PROJECT_REQUEST_NO =1
AND REQUEST_FILE_ORDER ;
----------------------------------------------------------------------------------------------------
--프리랜서별 수익 달마다 총수익 예상수익 가져오기

INSERT INTO "SETTLEMENT"
VALUES(SEQ_SETTLEMENT_NO.NEXTVAL,3,30,3,SYSDATE,100000,3);

UPDATE SETTLEMENT SET WORK_STATUS = 3 WHERE TRADE_NO =3;
UPDATE TRADE_REPORT SET REFUND_FL = 'Y' WHERE TRADE_NO =3;

SELECT * FROM SETTLEMENT
JOIN TRADE USING(TRADE_NO)
JOIN SERVICE USING(SERVICE_NO)
WHERE FREELANCER_NO = 30
AND WORK_STATUS NOT IN (2,3)
AND PAYMENT_TYPE IN (1);       ---예상 수익 

SELECT * FROM SETTLEMENT
JOIN TRADE USING(TRADE_NO)
JOIN SERVICE USING(SERVICE_NO)
WHERE FREELANCER_NO = 30
AND WORK_STATUS NOT IN (2,3)
AND PAYMENT_TYPE IN (1)
UNION 
SELECT * FROM SETTLEMENT
JOIN TRADE USING(TRADE_NO)
JOIN SERVICE USING(SERVICE_NO)
WHERE FREELANCER_NO = 30
AND WORK_STATUS IN (2)
AND PAYMENT_TYPE IN (2);     --총수익
-----------------------------------------------------------------
--월별 수익
SELECT SUM(PAYMENT_PRICE) PAYMENT_PRICE,PAYMENT_DATE_STRING 
		FROM (SELECT  p.*,TO_CHAR(PAYMENT_DATE,'YYYY-MM') PAYMENT_DATE_STRING 
			FROM (SELECT * FROM SETTLEMENT
					JOIN TRADE USING(TRADE_NO)
					JOIN SERVICE USING(SERVICE_NO)
					WHERE FREELANCER_NO = 30  
					AND WORK_STATUS IN (3)       
					AND PAYMENT_TYPE IN (3)
					AND USER_NO = 30        
					AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-12),'yyyy-mm'),'yyyy-mm') AND SYSDATE
					UNION 
					SELECT * FROM SETTLEMENT
					JOIN TRADE USING(TRADE_NO)
					JOIN SERVICE USING(SERVICE_NO)
					WHERE FREELANCER_NO = 30  
					AND WORK_STATUS IN (2)     
					AND PAYMENT_TYPE IN (2)
					AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-12),'yyyy-mm'),'yyyy-mm') AND SYSDATE) p)
		GROUP BY PAYMENT_DATE_STRING;
	
SELECT TO_DATE(to_char(add_months(sysdate,-12),'yyyy-mm'),'yyyy-mm') FROM DUAL;	
--------------------------------------------------------
SELECT SUM(PAYMENT_PRICE) PAYMENT_PRICE,PAYMENT_DATE_STRING 
FROM (SELECT  p.*,TO_CHAR(PAYMENT_DATE,'YYYY-MM') PAYMENT_DATE_STRING 
	FROM (SELECT * FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE FREELANCER_NO = 30
			AND WORK_STATUS IN (3)       ---------3.환불완료   환불 받은 수익
			AND PAYMENT_TYPE IN (3)
			AND USER_NO = 30             --------1.전문가인지 판결
			AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-12),'yyyy-mm'),'yyyy-mm') AND SYSDATE
			UNION 
			SELECT * FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE FREELANCER_NO = 30
			AND WORK_STATUS IN (2)       ---------2.정산 완료
			AND PAYMENT_TYPE IN (2)
			AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-12),'yyyy-mm'),'yyyy-mm') AND SYSDATE) p)
GROUP BY PAYMENT_DATE_STRING; ---달별 총 수익

SELECT SUM(PAYMENT_PRICE) PAYMENT_PRICE,PAYMENT_DATE_STRING 
FROM (SELECT  p.*,TO_CHAR(PAYMENT_DATE,'YYYY-MM') PAYMENT_DATE_STRING 
	FROM (SELECT * FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE FREELANCER_NO = 30
			AND WORK_STATUS IN (1,4)      ---------1.진행중/4.마감   예상수익
			AND PAYMENT_TYPE IN (1)
			AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-12),'yyyy-mm'),'yyyy-mm') AND SYSDATE) p)
	GROUP BY PAYMENT_DATE_STRING; -- 달별 예상 수익
--to_char(add_months(sysdate,-12),'yyyy-mm-dd')
--SELECT TO_DATE(to_char(add_months(sysdate,-12),'yyyy-mm'),'yyyy-mm') FROM DUAL;
	
	
SELECT (SELECT TO_CHAR(NVL(SUM(PAYMENT_PRICE),0), 'FM999,999,999,999')  --,PROFIT_TYPE 
FROM (SELECT  p.*,TO_CHAR(PAYMENT_DATE,'YYYY-MM') PAYMENT_DATE_STRING 
	FROM (SELECT * FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE FREELANCER_NO = 81
			AND WORK_STATUS IN (1,4)      ---------1.진행중/4.마감   예상수익
			AND PAYMENT_TYPE IN (1)
			AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-12),'yyyy-mm'),'yyyy-mm') AND SYSDATE) p)) PAYMENT_PRICE_STRING, '2' PROFIT_TYPE
		FROM DUAL
UNION
SELECT (SELECT TO_CHAR(NVL(SUM(PAYMENT_PRICE),0), 'FM999,999,999,999')-- PROFIT_TYPE 
FROM (SELECT  p.*,TO_CHAR(PAYMENT_DATE,'YYYY-MM') PAYMENT_DATE_STRING 
	FROM (SELECT * FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE FREELANCER_NO = 30
			AND WORK_STATUS IN (3)       ---------3.환불완료   환불 받은 수익
			AND PAYMENT_TYPE IN (3)
			AND USER_NO = 30             --------1.전문가인지 판결
			AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-12),'yyyy-mm'),'yyyy-mm') AND SYSDATE
			UNION 
			SELECT * FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE FREELANCER_NO = 81
			AND WORK_STATUS IN (2)       ---------2.정산 완료
			AND PAYMENT_TYPE IN (2)
			AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-12),'yyyy-mm'),'yyyy-mm') AND SYSDATE) p)) PAYMENT_PRICE_STRING, '1' PROFIT_TYPE
		FROM DUAL;
	


--2022-12-29 00:00:00.000
	
SELECT t.*,ROWNUM NUM FROM (SELECT  p.*,TO_CHAR(PAYMENT_DATE,'YYYY-MM-DD hh:mm') PAYMENT_DATE_STRING,
	TO_CHAR((PAYMENT_PRICE), 'FM999,999,999,999') PAYMENT_PRICE_STRING,
	TO_CHAR((SERVICE_PRICE), 'FM999,999,999,999') SERVICE_PRICE_STRING
		FROM (SELECT * FROM SETTLEMENT
				JOIN TRADE USING(TRADE_NO)
				JOIN SERVICE USING(SERVICE_NO)
				WHERE FREELANCER_NO = 30
				AND WORK_STATUS IN (3)       ---------3.환불완료   환불 받은 수익
				AND PAYMENT_TYPE IN (3)
				AND USER_NO = 30           --------1.전문가인지 판결
				AND TO_DATE(to_char(PAYMENT_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') >= '2022-11-10'
				--AND PAYMENT_DATE BETWEEN #{} AND #{}
				UNION 
				SELECT * FROM SETTLEMENT
				JOIN TRADE USING(TRADE_NO)
				JOIN SERVICE USING(SERVICE_NO)
				WHERE FREELANCER_NO = 30
				AND WORK_STATUS IN (2)       ---------2.정산 완료
				AND PAYMENT_TYPE IN (2)
				AND TO_DATE(to_char(PAYMENT_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') >= '2022-11-10'
				) p --AND PAYMENT_DATE BETWEEN #{} AND #{}
			ORDER BY PAYMENT_DATE) t;
	
	SELECT COUNT(*) 
	FROM (SELECT * FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE FREELANCER_NO = 30
			AND WORK_STATUS IN (3)       ---------3.환불완료   환불 받은 수익
			AND PAYMENT_TYPE IN (3)
			AND USER_NO = 30             --------1.전문가인지 판결
			--AND PAYMENT_DATE BETWEEN #{} AND #{}
			UNION 
			SELECT * FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE FREELANCER_NO = 30
			AND WORK_STATUS IN (2)       ---------2.정산 완료
			AND PAYMENT_TYPE IN (2)
			) p; --AND PAYMENT_DATE BETWEEN #{} AND #{}
	
	

SELECT s.* ,TO_CHAR(SERVICE_INQUIRY_CREATE_DATE,'YYYY-MM-DD') SERVICE_INQUIRY_DATE_STRING
FROM (SELECT * FROM SERVICE_INQUIRY
	JOIN SERVICE USING(SERVICE_NO)
	LEFT JOIN CATEGORY USING(THIRD_CATEGORY_NO)
	LEFT JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO)
	LEFT JOIN MAIN_CATEGORY USING(MAIN_CATEGORY_NO)
	JOIN "MEMBER" USING(MEMBER_NO)) s
WHERE FREELANCER_NO = 30
AND TO_DATE(to_char(SERVICE_INQUIRY_CREATE_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') >= '2022-11-10'
AND MAIN_CATEGORY_NO = 2 
AND SERVICE_TITLE LIKE '%제작%'
ORDER BY SERVICE_INQUIRY_CREATE_DATE;

SELECT COUNT(*) 
FROM (SELECT * FROM SERVICE_INQUIRY
	JOIN SERVICE USING(SERVICE_NO)
	LEFT JOIN CATEGORY USING(THIRD_CATEGORY_NO)
	LEFT JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO)
	LEFT JOIN MAIN_CATEGORY USING(MAIN_CATEGORY_NO)) s
WHERE FREELANCER_NO = 30
AND TO_DATE(to_char(SERVICE_INQUIRY_CREATE_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') >= '2022-11-10'
AND MAIN_CATEGORY_NO = 2 
AND SERVICE_TITLE LIKE '%제작%'
ORDER BY SERVICE_INQUIRY_CREATE_DATE;


SELECT CHAT_ROOM_NO,
			CASE WHEN CHAT_OPENMEM_NO = 30 THEN CHAT_ROOM_OPENMEM_DEL_FL
			     WHEN CLIENT_NO = 30 THEN CHAT_ROOM_CLIENT_DEL_FL
			END AS CHAT_ROOM_DEL_FL,
			CASE WHEN CHAT_OPENMEM_NO = 30 THEN 'CHAT_OPENMEM_NO'
			     WHEN CLIENT_NO = 30 THEN 'CLIENT_NO'
			END AS CHAT_ROOM_DEL_NO,
			CHAT_ROOM_OPENMEM_DEL_FL,CHAT_ROOM_CLIENT_DEL_FL
	      FROM CHAT_ROOM
	      WHERE ((CHAT_OPENMEM_NO = 30 AND CLIENT_NO = 63)
	      OR (CHAT_OPENMEM_NO = 63 AND CLIENT_NO = 30));
	     
	     
	    
SELECT NVL(SUM(CHAT_ROOM_NO),0) CHAT_ROOM_NO
	      FROM CHAT_ROOM
	      WHERE ((CHAT_OPENMEM_NO = 30 AND CLIENT_NO = 60)
	      OR (CHAT_OPENMEM_NO = 60 AND CLIENT_NO = 30));
	     
	     
	     
INSERT INTO CHAT_ROOM VALUES(SEQ_CHAT_ROOM_NO.NEXTVAL,DEFAULT,DEFAULT,63,30,DEFAULT);
INSERT INTO CHAT_ROOM VALUES(SEQ_CHAT_ROOM_NO.NEXTVAL,DEFAULT,DEFAULT,2,30,DEFAULT,NULL,NULL,NULL,NULL);
INSERT INTO CHAT_ROOM VALUES(SEQ_CHAT_ROOM_NO.NEXTVAL,'Y',DEFAULT,5,30,DEFAULT,NULL,NULL,NULL,NULL);
INSERT INTO CHAT_ROOM VALUES(SEQ_CHAT_ROOM_NO.NEXTVAL,'Y',DEFAULT,60,30,DEFAULT);

INSERT INTO CHAT VALUES(SEQ_CHAT_NO.NEXTVAL,'안녕하세여',DEFAULT,7,30,DEFAULT);
INSERT INTO CHAT VALUES(SEQ_CHAT_NO.NEXTVAL,'넵 안녕하세여',DEFAULT,7,63,DEFAULT);
INSERT INTO CHAT VALUES(SEQ_CHAT_NO.NEXTVAL,'안녕하세여',DEFAULT,10,30,DEFAULT);
INSERT INTO CHAT VALUES(SEQ_CHAT_NO.NEXTVAL,'안녕하세여 서비스 문의 주셔서 연락드립니다.',DEFAULT,10,30,DEFAULT);
INSERT INTO CHAT VALUES(SEQ_CHAT_NO.NEXTVAL,'연락 확인 하시면 확인부탁드려요!!!!!!!',DEFAULT,10,30,DEFAULT);
INSERT INTO CHAT VALUES(SEQ_CHAT_NO.NEXTVAL,'넵 안녕하세여',DEFAULT,10,60,DEFAULT);

UPDATE CHAT_ROOM SET CHAT_ROOM_OPENMEM_UPDATE_DATE = SYSDATE WHERE CHAT_ROOM_NO =8;

SELECT CHAT_ROOM_NO
         ,(SELECT CHAT_MESSAGE FROM (
            SELECT * FROM CHAT M2
            JOIN CHAT_ROOM ON CHAT_ROOM.CHAT_ROOM_NO = M2.CHAT_ROOM_NO
            WHERE M2.CHAT_ROOM_NO = R.CHAT_ROOM_NO 
            AND (((CHAT_ROOM_OPENMEM_UPDATE_DATE IS NULL OR CHAT_SEND_TIME >= CHAT_ROOM_OPENMEM_UPDATE_DATE) AND CHAT_OPENMEM_NO = #{memberNo})
            OR  ((CHAT_ROOM_CLIENT_UPDATE_DATE IS NULL OR CHAT_SEND_TIME >= CHAT_ROOM_CLIENT_UPDATE_DATE) AND CLIENT_NO = #{memberNo}))
            ORDER BY CHAT_NO DESC) 
            WHERE ROWNUM = 1) LAST_MESSAGE
         ,TO_CHAR((SELECT 
				CASE WHEN (CHAT_OPENMEM_NO = #{memberNo} AND CHAT_ROOM_OPENMEM_UPDATE_DATE IS NULL) THEN NVL(SEND_TIME,CHAT_ROOM_CREATE_DATE)
					 WHEN (CHAT_OPENMEM_NO = #{memberNo} AND CHAT_ROOM_OPENMEM_UPDATE_DATE IS NOT NULL AND SEND_TIME > CHAT_ROOM_OPENMEM_UPDATE_DATE) THEN NVL(SEND_TIME,CHAT_ROOM_CREATE_DATE)
					 WHEN (CHAT_OPENMEM_NO = #{memberNo} AND CHAT_ROOM_OPENMEM_UPDATE_DATE IS NOT NULL AND SEND_TIME < CHAT_ROOM_OPENMEM_UPDATE_DATE) THEN CHAT_ROOM_OPENMEM_UPDATE_DATE
					 WHEN (CLIENT_NO = #{memberNo} AND CHAT_ROOM_CLIENT_UPDATE_DATE IS NULL) THEN NVL(SEND_TIME,CHAT_ROOM_CREATE_DATE)
					 WHEN (CLIENT_NO = #{memberNo} AND CHAT_ROOM_CLIENT_UPDATE_DATE IS NOT NULL AND SEND_TIME > CHAT_ROOM_CREATE_DATE) THEN NVL(SEND_TIME,CHAT_ROOM_CREATE_DATE)
					 WHEN (CLIENT_NO = #{memberNo} AND CHAT_ROOM_CLIENT_UPDATE_DATE IS NOT NULL AND SEND_TIME < CHAT_ROOM_CREATE_DATE) THEN CHAT_ROOM_CREATE_DATE
				END AS LAST_SEND_TIME
			FROM (SELECT * FROM (SELECT NVL((SELECT MAX(CHAT_SEND_TIME) CHAT_SEND_TIME 
			               FROM CHAT M
			               JOIN CHAT_ROOM ON CHAT_ROOM.CHAT_ROOM_NO = M.CHAT_ROOM_NO
			               WHERE R.CHAT_ROOM_NO  = M.CHAT_ROOM_NO), CHAT_ROOM_CREATE_DATE) SEND_TIME, CHAT_ROOM_NO
			               FROM CHAT_ROOM R
			      WHERE (CHAT_OPENMEM_NO = #{memberNo}
			      OR CLIENT_NO = #{memberNo}))
			JOIN CHAT_ROOM USING(CHAT_ROOM_NO)) M
               WHERE R.CHAT_ROOM_NO  = M.CHAT_ROOM_NO), 
               'YYYY.MM.DD HH24:MI') SEND_TIME
         ,NVL2((SELECT CHAT_OPENMEM_NO FROM CHAT_ROOM R2
            WHERE R2.CHAT_ROOM_NO = R.CHAT_ROOM_NO
            AND R2.CHAT_OPENMEM_NO = #{memberNo}),
            R.CLIENT_NO, -- NOT NULL 
            R.CHAT_OPENMEM_NO
            ) CLIENT_NO   
         ,NVL2((SELECT CHAT_OPENMEM_NO FROM CHAT_ROOM R2
            WHERE R2.CHAT_ROOM_NO = R.CHAT_ROOM_NO
            AND R2.CHAT_OPENMEM_NO = #{memberNo}),
            (SELECT MEMBER_NICKNAME FROM MEMBER WHERE MEMBER_NO = R.CLIENT_NO),
            (SELECT MEMBER_NICKNAME FROM MEMBER WHERE MEMBER_NO = R.CHAT_OPENMEM_NO)
            ) CLIENT_NICKNAME   
         ,NVL2((SELECT CHAT_OPENMEM_NO FROM CHAT_ROOM R2
            WHERE R2.CHAT_ROOM_NO = R.CHAT_ROOM_NO
            AND R2.CHAT_OPENMEM_NO = #{memberNo}),
            (SELECT MEMBER_PROFILE FROM MEMBER WHERE MEMBER_NO = R.CLIENT_NO),
            (SELECT MEMBER_PROFILE FROM MEMBER WHERE MEMBER_NO = R.CHAT_OPENMEM_NO)
            ) CLIENT_PROFILE
         ,(SELECT COUNT(*) FROM (SELECT * FROM CHAT JOIN CHAT_ROOM USING(CHAT_ROOM_NO)) M 
         	WHERE M.CHAT_ROOM_NO = R.CHAT_ROOM_NO 
         	AND READ_FL = 'N' AND SENDER_NO != #{memberNo}
         	AND (((CHAT_ROOM_OPENMEM_UPDATE_DATE IS NULL OR CHAT_SEND_TIME >= CHAT_ROOM_OPENMEM_UPDATE_DATE) AND CHAT_OPENMEM_NO = #{memberNo})
            OR ((CHAT_ROOM_CLIENT_UPDATE_DATE IS NULL OR CHAT_SEND_TIME >= CHAT_ROOM_CLIENT_UPDATE_DATE) AND CLIENT_NO = #{memberNo}))) NOT_READ_COUNT
         ,(SELECT MAX(CHAT_NO) CHAT_SEND_TIME FROM CHAT M 
         WHERE R.CHAT_ROOM_NO  = M.CHAT_ROOM_NO
         AND (((CHAT_ROOM_OPENMEM_UPDATE_DATE IS NULL OR CHAT_SEND_TIME >= CHAT_ROOM_OPENMEM_UPDATE_DATE) AND CHAT_OPENMEM_NO = #{memberNo})
         OR ((CHAT_ROOM_CLIENT_UPDATE_DATE IS NULL OR CHAT_SEND_TIME >= CHAT_ROOM_CLIENT_UPDATE_DATE) AND CLIENT_NO = #{memberNo}))
         ) MAX_MESSAGE_NO,
         NVL2((SELECT CHAT_OPENMEM_NO FROM CHAT_ROOM R2
            WHERE R2.CHAT_ROOM_NO = R.CHAT_ROOM_NO
            AND R2.CHAT_OPENMEM_NO = #{memberNo}),
            (SELECT CASE WHEN FREELANCER_FL ='Y' THEN (FREE_CONTACT_TIME1||':00-'||FREE_CONTACT_TIME2||':00') ELSE NULL END AS FREE_CONTACT_TIME 
            	FROM MEMBER LEFT JOIN FREELANCER ON (MEMBER_NO=FREELANCER_NO) WHERE MEMBER_NO = R.CLIENT_NO),
            (SELECT CASE WHEN FREELANCER_FL ='Y' THEN (FREE_CONTACT_TIME1||':00-'||FREE_CONTACT_TIME2||':00') ELSE NULL END AS FREE_CONTACT_TIME 
            	FROM MEMBER LEFT JOIN FREELANCER ON (MEMBER_NO=FREELANCER_NO) WHERE MEMBER_NO = R.CHAT_OPENMEM_NO)
            ) CLIENT_FREE_CONTACT_TIME,
         NVL2((SELECT CHAT_OPENMEM_NO FROM CHAT_ROOM R2
            WHERE R2.CHAT_ROOM_NO = R.CHAT_ROOM_NO
            AND R2.CHAT_OPENMEM_NO = #{memberNo}),
            (SELECT GRADE_NAME 
            	FROM MEMBER LEFT JOIN (SELECT * FROM FREELANCER JOIN GRADE USING(GRADE_NO)) ON (MEMBER_NO=FREELANCER_NO) WHERE MEMBER_NO = R.CLIENT_NO),
            (SELECT GRADE_NAME 
            	FROM MEMBER LEFT JOIN (SELECT * FROM FREELANCER JOIN GRADE USING(GRADE_NO)) ON (MEMBER_NO=FREELANCER_NO) WHERE MEMBER_NO = R.CHAT_OPENMEM_NO)
            ) CLIENT_GRADE_NAME
      FROM CHAT_ROOM R
      WHERE (CHAT_OPENMEM_NO = #{memberNo}
      OR CLIENT_NO = #{memberNo})
      AND ((CHAT_ROOM_OPENMEM_DEL_FL = 'N' AND CHAT_OPENMEM_NO = #{memberNo})
	  OR (CHAT_ROOM_CLIENT_DEL_FL = 'N' AND CLIENT_NO = #{memberNo}))
      ORDER BY MAX_MESSAGE_NO DESC NULLS LAST;
   
     
--------------------------------------------------------------------     
     
SELECT 
	CASE WHEN (CHAT_OPENMEM_NO = 30 AND CHAT_ROOM_OPENMEM_UPDATE_DATE IS NULL) THEN NVL(SEND_TIME,CHAT_ROOM_CREATE_DATE)
		 WHEN (CHAT_OPENMEM_NO = 30 AND CHAT_ROOM_OPENMEM_UPDATE_DATE IS NOT NULL AND SEND_TIME < CHAT_ROOM_OPENMEM_UPDATE_DATE) THEN CHAT_ROOM_OPENMEM_UPDATE_DATE
		 WHEN (CLIENT_NO = 30 AND CHAT_ROOM_CLIENT_UPDATE_DATE IS NULL) THEN NVL(SEND_TIME,CHAT_ROOM_CREATE_DATE)
		 WHEN (CLIENT_NO = 30 AND CHAT_ROOM_CLIENT_UPDATE_DATE IS NOT NULL AND SEND_TIME < CHAT_ROOM_CREATE_DATE) THEN CHAT_ROOM_CREATE_DATE
	END AS LAST_SEND_TIME
,M.*
FROM (SELECT * FROM (SELECT NVL((SELECT MAX(CHAT_SEND_TIME) CHAT_SEND_TIME 
               FROM CHAT M
               JOIN CHAT_ROOM ON CHAT_ROOM.CHAT_ROOM_NO = M.CHAT_ROOM_NO
               WHERE R.CHAT_ROOM_NO  = M.CHAT_ROOM_NO), CHAT_ROOM_CREATE_DATE) SEND_TIME, CHAT_ROOM_NO
               FROM CHAT_ROOM R
      WHERE (CHAT_OPENMEM_NO = 30
      OR CLIENT_NO = 30))
JOIN CHAT_ROOM USING(CHAT_ROOM_NO)) M;

SELECT TO_CHAR(NVL((SELECT MAX(CHAT_SEND_TIME) CHAT_SEND_TIME 
               FROM CHAT M
               JOIN CHAT_ROOM ON CHAT_ROOM.CHAT_ROOM_NO = M.CHAT_ROOM_NO
               WHERE R.CHAT_ROOM_NO  = M.CHAT_ROOM_NO), CHAT_ROOM_CREATE_DATE), 
               'YYYY.MM.DD hh:mm') SEND_TIME, CHAT_ROOM_NO
               FROM CHAT_ROOM R
      WHERE (CHAT_OPENMEM_NO = 30
      OR CLIENT_NO = 30);
------------------------------------------------------------------------------------
INSERT INTO "GRADE"
VALUES(2,'LEVEL1',4.0,80,80,100000,1);
INSERT INTO "GRADE"
VALUES(3,'LEVEL2',4.5,85,80,5000000,10); 
INSERT INTO "GRADE"
VALUES(4,'MASTER',4.7,90,85,10000000,30); 



INSERT INTO "SUB_CATEGORY"
VALUES(SEQ_WORK_NO.NEXTVAL,DEFAULT,9);   
-----------------------------------------------------
INSERT INTO "WORK"
VALUES(SEQ_WORK_NO.NEXTVAL,DEFAULT,9);   
      
     ------------------------------------------------------------------------------------------------
      INSERT INTO "CHAT"
      VALUES(SEQ_CHAT_NO.NEXTVAL, #{chatMessage}, DEFAULT, #{chatRoomNo}, #{senderNo}, DEFAULT)
-----------------------------------------------------------------------------------------------------
UPDATE "CHAT" SET
      READ_FL = 'Y'
      WHERE CHAT_ROOM_NO = #{chatRoomNo}
      AND SENDER_NO != #{memberNo};
----------------------------------------------------------------------------------------------
SELECT CHAT_NO, CHAT_MESSAGE, READ_FL, SENDER_NO, CHAT_ROOM_NO,
      TO_CHAR(CHAT_SEND_TIME, 'YYYY.MM.DD HH24:MI') SEND_TIME 
      FROM CHAT
      JOIN CHAT_ROOM USING(CHAT_ROOM_NO) 
      WHERE CHAT_ROOM_NO  = 10
      AND (CHAT_ROOM_OPENMEM_DEL_FL = 'N' OR CHAT_SEND_TIME >= CHAT_ROOM_OPENMEM_UPDATE_DATE AND CHAT_OPENMEM_NO = 60)
      AND (CHAT_ROOM_CLIENT_DEL_FL == 'N' OR CHAT_SEND_TIME >= CHAT_ROOM_CLIENT_UPDATE_DATE AND CLIENT_NO = 60)
      ORDER BY CHAT_NO;
     
UPDATE "CHAT_ROOM" SET
      CHAT_ROOM_OPENMEM_DEL_FL = 'Y'
      WHERE CHAT_ROOM_NO = #{chatRoomNo}
      AND CHAT_OPENMEM_NO = #{memberNo};
     
UPDATE "CHAT_ROOM" SET
      CHAT_ROOM_CLIENT_DEL_FL = 'Y'
      WHERE CHAT_ROOM_NO = #{chatRoomNo}
      AND CLIENT_NO = #{memberNo};
     
     
SELECT CHAT_ROOM_NO,
			CASE WHEN CHAT_OPENMEM_NO = #{clientNo} THEN CHAT_ROOM_OPENMEM_DEL_FL
			     WHEN CLIENT_NO = #{clientNo} THEN CHAT_ROOM_CLIENT_DEL_FL
			END AS CHAT_ROOM_DEL_FL,
			CASE WHEN CHAT_OPENMEM_NO = #{clientNo} THEN 'CHAT_OPENMEM_NO'
			     WHEN CLIENT_NO = #{clientNo} THEN 'CLIENT_NO'
			END AS CHAT_ROOM_DEL_NO,
			CHAT_ROOM_OPENMEM_DEL_FL,CHAT_ROOM_CLIENT_DEL_FL
	      FROM CHAT_ROOM
	      WHERE ((CHAT_OPENMEM_NO = #{clientNo} AND CLIENT_NO = #{loginMemberNo})
	      OR (CHAT_OPENMEM_NO = #{loginMemberNo} AND CLIENT_NO = #{clientNo}));
	     
---------------------------------------------------------------------------------------
---작업일 준수율   WORK_RATE이 작업일 준수율 한사람 
SELECT SUM(DATE_RATE) DATE_RATE,COUNT(*) TRADE_COUNT ,ROUND((SUM(DATE_RATE)/COUNT(*))*100) WORK_RATE
FROM (SELECT t.*,
	CASE WHEN SERVICE_WORK_PERIOD >= END_WORK_PERIOD THEN 1
		 WHEN SERVICE_WORK_PERIOD < END_WORK_PERIOD THEN 0
	END AS DATE_RATE
	FROM (SELECT SERVICE_WORK_PERIOD,TRADE_NO,SERVICE_NO,FREELANCER_NO, 
		TO_DATE(WORK_SEND_DATE, 'YYYY-MM-DD') - TO_DATE(PAYMENT_DATE, 'YYYY-MM-DD') END_WORK_PERIOD
		FROM FREELANCER 
		JOIN SERVICE USING(FREELANCER_NO)
		JOIN TRADE USING(SERVICE_NO)
		JOIN SETTLEMENT USING(TRADE_NO)
		LEFT JOIN (SELECT * FROM (SELECT w.*,
			ROW_NUMBER() OVER (PARTITION BY TRADE_NO ORDER BY WORK_NO) rum
			FROM "WORK"  w) WHERE rum = 1) USING(TRADE_NO)
		WHERE WORK_STATUS = 2
		AND PAYMENT_TYPE =1
		AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-6),'yyyy-mm'),'yyyy-mm') AND SYSDATE) t);
-----------------------------------------------------------------------------
---작업일 준수율   WORK_RATE이 작업일 준수율 모든 사람!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SELECT FREELANCER_NO,NVL(DATE_RATE,0) DATE_RATE,NVL(TRADE_COUNT,0) DATE_RATE, NVL(WORK_RATE,0) COMPLETION_RATE
FROM FREELANCER 
LEFT JOIN (SELECT FREELANCER_NO,SUM(DATE_RATE) DATE_RATE,COUNT(*) TRADE_COUNT ,ROUND((SUM(DATE_RATE)/COUNT(*))*100) WORK_RATE
	FROM (SELECT t.*,
		CASE WHEN SERVICE_WORK_PERIOD >= END_WORK_PERIOD THEN 1
			 WHEN SERVICE_WORK_PERIOD < END_WORK_PERIOD THEN 0
		END AS DATE_RATE
		FROM (SELECT SERVICE_WORK_PERIOD,TRADE_NO,SERVICE_NO,FREELANCER_NO, 
			TO_DATE(WORK_SEND_DATE, 'YYYY-MM-DD') - TO_DATE(PAYMENT_DATE, 'YYYY-MM-DD') END_WORK_PERIOD
			FROM FREELANCER 
			JOIN SERVICE USING(FREELANCER_NO)
			JOIN TRADE USING(SERVICE_NO)
			JOIN SETTLEMENT USING(TRADE_NO)
			LEFT JOIN (SELECT * FROM (SELECT w.*,
				ROW_NUMBER() OVER (PARTITION BY TRADE_NO ORDER BY WORK_NO) rum
				FROM "WORK"  w) WHERE rum = 1) USING(TRADE_NO)
			WHERE WORK_STATUS = 2
			AND PAYMENT_TYPE =1
			AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-6),'yyyy-mm'),'yyyy-mm') AND SYSDATE) t)
	GROUP BY FREELANCER_NO) USING(FREELANCER_NO);
---------------------------------------------------------------------------
--FREELANCER_NO = 
--리뷰 평점 만족도  -- 한사람
SELECT ROUND(AVG(REVIEW_POINT),1) REVIEW_POINT
FROM REVIEW 	
JOIN TRADE ON REVIEW_NO = TRADE_NO
JOIN SERVICE USING(SERVICE_NO)
WHERE FREELANCER_NO = 30;
-------------------------------------------------
---모든 사람 리뷰 만족도!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SELECT FREELANCER_NO, GRADE_NO, NVL(REVIEW_POINT,0) SATISFACTION
FROM FREELANCER
LEFT JOIN (SELECT FREELANCER_NO, ROUND(AVG(REVIEW_POINT),1) REVIEW_POINT
	FROM (SELECT REVIEW_POINT,FREELANCER_NO
		FROM REVIEW 	
		JOIN TRADE ON REVIEW_NO = TRADE_NO
		JOIN SERVICE USING(SERVICE_NO) WHERE REVIEW_CREATE_TIME BETWEEN FN_DT1 AND (ADD_MONTHS(FN_DT1, 6) - (1/86400)))
	GROUP BY FREELANCER_NO) USING(FREELANCER_NO);
------------------------------------------------
-------------------------------------------
--메세지 응답률
SELECT SERVICE_NO,SERVICE_INQUIRY_NO,SERVICE_INQUIRY_CREATE_DATE,MEMBER_NO,FREELANCER_NO
FROM SERVICE_INQUIRY
JOIN SERVICE USING(SERVICE_NO);
----메세지 응답률 최종
SELECT ROUND(AVG(MESSAGE_RATE)*100) MESSAGE_RATE
FROM (SELECT 
	CASE WHEN SERVICE_INQUIRY_CREATE_DATE <= CHAT_SEND_TIME THEN 1
		 WHEN SERVICE_INQUIRY_CREATE_DATE > CHAT_SEND_TIME THEN 0
	END AS MESSAGE_RATE 
	FROM (SELECT *
		FROM (SELECT SERVICE_NO,SERVICE_INQUIRY_NO,SERVICE_INQUIRY_CREATE_DATE,MEMBER_NO,FREELANCER_NO
			FROM SERVICE_INQUIRY
			JOIN SERVICE USING(SERVICE_NO))
		JOIN (SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
			FROM (SELECT * 
				FROM (SELECT c.*,
					ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
					FROM CHAT c WHERE SENDER_NO = 30) WHERE rum = 1)
			JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
			WHERE (CHAT_OPENMEM_NO = 30 OR CLIENT_NO = 30)) ON (CHAT_OPENMEM_NO = FREELANCER_NO) 
		WHERE (CLIENT_NO=MEMBER_NO)
		UNION
		SELECT *
		FROM (SELECT SERVICE_NO,SERVICE_INQUIRY_NO,SERVICE_INQUIRY_CREATE_DATE,MEMBER_NO,FREELANCER_NO
			FROM SERVICE_INQUIRY
			JOIN SERVICE USING(SERVICE_NO))
		JOIN (SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
			FROM (SELECT * 
				FROM (SELECT c.*,
					ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
					FROM CHAT c WHERE SENDER_NO = 30) WHERE rum = 1)
			JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
			WHERE (CHAT_OPENMEM_NO = 30 OR CLIENT_NO = 30)) ON (CHAT_OPENMEM_NO = MEMBER_NO) 
		WHERE (CLIENT_NO=FREELANCER_NO)));
--------------------------------------------------------------------------------------------------------------------
--메세지 응답률 모든 사람 
SELECT ROUND(AVG(MESSAGE_RATE)*100) MESSAGE_RATE
FROM (SELECT 
   CASE WHEN SERVICE_INQUIRY_CREATE_DATE <= CHAT_SEND_TIME THEN 1
       WHEN SERVICE_INQUIRY_CREATE_DATE > CHAT_SEND_TIME THEN 0
   END AS MESSAGE_RATE,FREELANCER_NO
   FROM (SELECT *
      FROM (SELECT SERVICE_NO,SERVICE_INQUIRY_NO,SERVICE_INQUIRY_CREATE_DATE,MEMBER_NO,FREELANCER_NO
         FROM SERVICE_INQUIRY
         JOIN SERVICE USING(SERVICE_NO))
      JOIN (SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
         FROM (SELECT * FROM (SELECT * 
			      FROM (SELECT c.*,FREELANCER.FREELANCER_NO,
			            ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
			            FROM CHAT c JOIN FREELANCER ON(SENDER_NO = FREELANCER_NO) WHERE SENDER_NO = FREELANCER_NO) WHERE rum = 1) JOIN FREELANCER USING(FREELANCER_NO))
         JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
         WHERE (CHAT_OPENMEM_NO = FREELANCER_NO OR CLIENT_NO = FREELANCER_NO)) ON (CHAT_OPENMEM_NO = FREELANCER_NO) 
      WHERE (CLIENT_NO=MEMBER_NO)
      UNION
      SELECT *
      FROM (SELECT SERVICE_NO,SERVICE_INQUIRY_NO,SERVICE_INQUIRY_CREATE_DATE,MEMBER_NO,FREELANCER_NO
         FROM SERVICE_INQUIRY
         JOIN SERVICE USING(SERVICE_NO))
      JOIN (SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
			FROM (SELECT * FROM (SELECT * 
			      FROM (SELECT c.*,FREELANCER.FREELANCER_NO,
			            ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
			            FROM CHAT c JOIN FREELANCER ON(SENDER_NO = FREELANCER_NO) WHERE SENDER_NO = FREELANCER_NO) WHERE rum = 1) JOIN FREELANCER USING(FREELANCER_NO))
			JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
			WHERE (CHAT_OPENMEM_NO = FREELANCER_NO OR CLIENT_NO = FREELANCER_NO)) ON (CHAT_OPENMEM_NO = MEMBER_NO) 
      WHERE (CLIENT_NO=FREELANCER_NO)));
-----
SELECT FREELANCER_NO,NVL(MESSAGE_RATE,0) INQUIRY_RATE
FROM FREELANCER
LEFT JOIN (SELECT ROUND(AVG(MESSAGE_RATE)*100) MESSAGE_RATE,FREELANCER_NO
	FROM (SELECT SERVICE_INQUIRY_NO,FREELANCER_NO,NVL(MESSAGE_RATE,0) MESSAGE_RATE
		FROM (SELECT 
		   CASE WHEN SERVICE_INQUIRY_CREATE_DATE <= CHAT_SEND_TIME THEN 1
		       WHEN SERVICE_INQUIRY_CREATE_DATE > CHAT_SEND_TIME THEN 0
		   END AS MESSAGE_RATE,FREELANCER_NO FREELANCER_NO_MESSAGE,SERVICE_INQUIRY_NO
		   FROM (SELECT *
		      FROM (SELECT SERVICE_NO,SERVICE_INQUIRY_NO,SERVICE_INQUIRY_CREATE_DATE,MEMBER_NO,FREELANCER_NO
		         FROM SERVICE_INQUIRY
		         JOIN SERVICE USING(SERVICE_NO))
		      LEFT JOIN (SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
		         FROM (SELECT * FROM (SELECT * 
					      FROM (SELECT c.*,FREELANCER.FREELANCER_NO,
					            ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
					            FROM CHAT c JOIN FREELANCER ON(SENDER_NO = FREELANCER_NO) WHERE SENDER_NO = FREELANCER_NO) WHERE rum = 1) JOIN FREELANCER USING(FREELANCER_NO))
		         JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
		         WHERE (CHAT_OPENMEM_NO = FREELANCER_NO OR CLIENT_NO = FREELANCER_NO)) ON (CHAT_OPENMEM_NO = FREELANCER_NO) 
		      WHERE (CLIENT_NO=MEMBER_NO)-----------------------
		      AND SERVICE_INQUIRY_CREATE_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-6),'yyyy-mm'),'yyyy-mm') AND SYSDATE
		      UNION
		      SELECT *
		      FROM (SELECT SERVICE_NO,SERVICE_INQUIRY_NO,SERVICE_INQUIRY_CREATE_DATE,MEMBER_NO,FREELANCER_NO
		         FROM SERVICE_INQUIRY
		         JOIN SERVICE USING(SERVICE_NO))
		      JOIN (SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
					FROM (SELECT * FROM (SELECT * 
					      FROM (SELECT c.*,FREELANCER.FREELANCER_NO,
					            ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
					            FROM CHAT c JOIN FREELANCER ON(SENDER_NO = FREELANCER_NO) WHERE SENDER_NO = FREELANCER_NO) WHERE rum = 1) JOIN FREELANCER USING(FREELANCER_NO))
					JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
					WHERE (CHAT_OPENMEM_NO = FREELANCER_NO OR CLIENT_NO = FREELANCER_NO)) ON (CHAT_OPENMEM_NO = MEMBER_NO) 
		      WHERE (CLIENT_NO=FREELANCER_NO)
		      AND SERVICE_INQUIRY_CREATE_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-6),'yyyy-mm'),'yyyy-mm') AND SYSDATE))
		      RIGHT JOIN (SELECT * FROM SERVICE_INQUIRY JOIN SERVICE USING(SERVICE_NO)) USING(SERVICE_INQUIRY_NO)) 
	GROUP BY FREELANCER_NO) USING(FREELANCER_NO);
------
$2a$10$84Bpslgy4dcUztHwS16gJOxCSCVghFq5K8/0.WL8auLifZ/QIaV.m
--
SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
FROM (SELECT * FROM (SELECT * 
      FROM (SELECT c.*,FREELANCER.FREELANCER_NO,
            ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
            FROM CHAT c JOIN FREELANCER ON(SENDER_NO = FREELANCER_NO) WHERE SENDER_NO = FREELANCER_NO) WHERE rum = 1) JOIN FREELANCER USING(FREELANCER_NO))
JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
WHERE (CHAT_OPENMEM_NO = FREELANCER_NO OR CLIENT_NO = FREELANCER_NO);
----------------------------------------------------------------------------------------------------------------------
----
SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
FROM (SELECT * 
	FROM (SELECT c.*,
		ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
		FROM CHAT c WHERE SENDER_NO = 30) WHERE rum = 1)
JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
WHERE (CHAT_OPENMEM_NO = 30 OR CLIENT_NO = 30);
-------------------------------------------------------------------------------
--- 6개월간 누적 판매 금액 ---한사람
SELECT (SELECT TO_CHAR(SUM(PAYMENT_PRICE), 'FM999,999,999,999')
		FROM (SELECT  p.*,TO_CHAR(PAYMENT_DATE,'YYYY-MM') PAYMENT_DATE_STRING 
			FROM (SELECT * FROM SETTLEMENT
					JOIN TRADE USING(TRADE_NO)
					JOIN SERVICE USING(SERVICE_NO)
					WHERE FREELANCER_NO = 30
					AND WORK_STATUS IN (3)      
					AND PAYMENT_TYPE IN (3)
					AND USER_NO = 30         
					AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-6),'yyyy-mm'),'yyyy-mm') AND SYSDATE
					UNION 
					SELECT * FROM SETTLEMENT
					JOIN TRADE USING(TRADE_NO)
					JOIN SERVICE USING(SERVICE_NO)
					WHERE FREELANCER_NO = 30
					AND WORK_STATUS IN (2)      
					AND PAYMENT_TYPE IN (2)
					AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-6),'yyyy-mm'),'yyyy-mm') AND SYSDATE) p)) PAYMENT_PRICE_STRING
FROM DUAL;  
--- 전체 누적 판매 금액-----모든 사람  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SELECT FREELANCER_NO,NVL(PAYMENT_PRICE,0) SALE_PROCEEDS
FROM FREELANCER
LEFT JOIN (SELECT TO_CHAR(SUM(PAYMENT_PRICE), 'FM999,999,999,999') PAYMENT_PRICE,FREELANCER_NO
	FROM (SELECT * FROM SETTLEMENT
		JOIN TRADE USING(TRADE_NO)
		JOIN SERVICE USING(SERVICE_NO)
		--WHERE FREELANCER_NO = 30
		WHERE  WORK_STATUS IN (3)      
		AND PAYMENT_TYPE IN (3)
		AND USER_NO = FREELANCER_NO         
		UNION 
		SELECT * FROM SETTLEMENT
		JOIN TRADE USING(TRADE_NO)
		JOIN SERVICE USING(SERVICE_NO)
		--WHERE FREELANCER_NO = 30
		WHERE WORK_STATUS IN (2)      
		AND PAYMENT_TYPE IN (2))
	GROUP BY FREELANCER_NO) USING(FREELANCER_NO);

-------------------------------------------------------------------------------
--전체 판매 건수 --한사람--잘못함 다시 짜기
SELECT COUNT(*) 
FROM SETTLEMENT
JOIN TRADE USING(TRADE_NO)
JOIN SERVICE USING(SERVICE_NO)
WHERE FREELANCER_NO = 30
AND WORK_STATUS IN (2)   
AND PAYMENT_TYPE IN (2);
--누적 판매 건수 -- 모둔 사람!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SELECT FREELANCER_NO,NVL(SALE_COUNT,0) SALE_COUNT
FROM FREELANCER
LEFT JOIN (SELECT FREELANCER_NO,COUNT(*) SALE_COUNT
	FROM (SELECT * FROM SETTLEMENT
		JOIN TRADE USING(TRADE_NO)
		JOIN SERVICE USING(SERVICE_NO)
		--WHERE FREELANCER_NO = 30
		WHERE  WORK_STATUS IN (3)      
		AND PAYMENT_TYPE IN (3)
		AND USER_NO = FREELANCER_NO         
		UNION
		SELECT * 
		FROM SETTLEMENT
		JOIN TRADE USING(TRADE_NO)
		JOIN SERVICE USING(SERVICE_NO)
		--WHERE FREELANCER_NO = 30
		WHERE WORK_STATUS IN (2)   
		AND PAYMENT_TYPE IN (2))
	GROUP BY FREELANCER_NO) USING(FREELANCER_NO)
WHERE FREELANCER_NO=30;
--SELECT TO_DATE(to_char(add_months(sysdate,-6),'yyyy-mm'),'yyyy-mm') FROM DUAL;
--------------------------------------------------------------------------------------
SELECT FREELANCER_NO,GRADE_NO,GRADE_NAME,SALE_COUNT,SALE_PROCEEDS_STRING,SALE_PROCEEDS,SATISFACTION,COMPLETION_RATE,INQUIRY_RATE
FROM (SELECT FREELANCER_NO,GRADE_NAME,GRADE_NO FROM FREELANCER JOIN GRADE USING(GRADE_NO))
JOIN (SELECT FREELANCER_NO,NVL(SALE_COUNT,0) SALE_COUNT
	FROM FREELANCER
	LEFT JOIN (SELECT FREELANCER_NO,COUNT(*) SALE_COUNT
		FROM (SELECT * FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE  WORK_STATUS IN (3)      
			AND PAYMENT_TYPE IN (3)
			AND USER_NO = FREELANCER_NO         
			UNION
			SELECT * 
			FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE WORK_STATUS IN (2)   
			AND PAYMENT_TYPE IN (2))-----------------------------------------------------
		GROUP BY FREELANCER_NO) USING(FREELANCER_NO)) USING(FREELANCER_NO)
JOIN (SELECT FREELANCER_NO,NVL(PAYMENT_PRICE_STRING,0) SALE_PROCEEDS_STRING, NVL(PAYMENT_PRICE,0) SALE_PROCEEDS
	FROM FREELANCER
	LEFT JOIN (SELECT TO_CHAR(SUM(PAYMENT_PRICE), 'FM999,999,999,999') PAYMENT_PRICE_STRING,SUM(PAYMENT_PRICE) PAYMENT_PRICE,FREELANCER_NO
		FROM (SELECT * FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE  WORK_STATUS IN (3)      
			AND PAYMENT_TYPE IN (3)
			AND USER_NO = FREELANCER_NO         -----------------------------------------------------
			UNION 
			SELECT * FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE WORK_STATUS IN (2)      
			AND PAYMENT_TYPE IN (2))----------------------------------
		GROUP BY FREELANCER_NO) USING(FREELANCER_NO))  USING(FREELANCER_NO)
JOIN (SELECT FREELANCER_NO,NVL(REVIEW_POINT,0) SATISFACTION --리뷰 만족도
	FROM FREELANCER
	LEFT JOIN (SELECT FREELANCER_NO, ROUND(AVG(REVIEW_POINT),1) REVIEW_POINT
		FROM (SELECT REVIEW_POINT,FREELANCER_NO
			FROM REVIEW 	
			JOIN TRADE ON REVIEW_NO = TRADE_NO
			JOIN SERVICE USING(SERVICE_NO))
		GROUP BY FREELANCER_NO) USING(FREELANCER_NO)) USING(FREELANCER_NO)
JOIN (SELECT FREELANCER_NO, NVL(WORK_RATE,0) COMPLETION_RATE--,NVL(DATE_RATE,0) DATE_RATE,NVL(TRADE_COUNT,0) DATE_RATE, NVL(WORK_RATE,0) COMPLETION_RATE --작업물 준수율
	FROM FREELANCER 
	LEFT JOIN (SELECT FREELANCER_NO,SUM(DATE_RATE) DATE_RATE,COUNT(*) TRADE_COUNT ,ROUND((SUM(DATE_RATE)/COUNT(*))*100) WORK_RATE
		FROM (SELECT t.*,
			CASE WHEN SERVICE_WORK_PERIOD >= END_WORK_PERIOD THEN 1
				 WHEN SERVICE_WORK_PERIOD < END_WORK_PERIOD THEN 0
			END AS DATE_RATE
			FROM (SELECT SERVICE_WORK_PERIOD,TRADE_NO,SERVICE_NO,FREELANCER_NO, 
				TO_DATE(WORK_SEND_DATE, 'YYYY-MM-DD') - TO_DATE(PAYMENT_DATE, 'YYYY-MM-DD') END_WORK_PERIOD
				FROM FREELANCER 
				JOIN SERVICE USING(FREELANCER_NO)
				JOIN TRADE USING(SERVICE_NO)
				JOIN SETTLEMENT USING(TRADE_NO)
				LEFT JOIN (SELECT * FROM (SELECT w.*,
					ROW_NUMBER() OVER (PARTITION BY TRADE_NO ORDER BY WORK_NO) rum
					FROM "WORK"  w) WHERE rum = 1) USING(TRADE_NO)
				WHERE WORK_STATUS = 2
				AND PAYMENT_TYPE =1
				AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-6),'yyyy-mm'),'yyyy-mm') AND SYSDATE) t)
		GROUP BY FREELANCER_NO) USING(FREELANCER_NO)) USING(FREELANCER_NO)
JOIN (SELECT FREELANCER_NO,NVL(MESSAGE_RATE,0) INQUIRY_RATE ----문의 응답률
		FROM FREELANCER
		LEFT JOIN (SELECT ROUND(AVG(MESSAGE_RATE)*100) MESSAGE_RATE,FREELANCER_NO
			FROM (SELECT SERVICE_INQUIRY_NO,FREELANCER_NO,NVL(MESSAGE_RATE,0) MESSAGE_RATE
				FROM (SELECT 
				   CASE WHEN SERVICE_INQUIRY_CREATE_DATE <= CHAT_SEND_TIME THEN 1
				       WHEN SERVICE_INQUIRY_CREATE_DATE > CHAT_SEND_TIME THEN 0
				   END AS MESSAGE_RATE,FREELANCER_NO FREELANCER_NO_MESSAGE,SERVICE_INQUIRY_NO
				   FROM (SELECT *
				      FROM (SELECT SERVICE_NO,SERVICE_INQUIRY_NO,SERVICE_INQUIRY_CREATE_DATE,MEMBER_NO,FREELANCER_NO
				         FROM SERVICE_INQUIRY
				         JOIN SERVICE USING(SERVICE_NO))
				      LEFT JOIN (SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
				         FROM (SELECT * FROM (SELECT * 
							      FROM (SELECT c.*,FREELANCER.FREELANCER_NO,
							            ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
							            FROM CHAT c JOIN FREELANCER ON(SENDER_NO = FREELANCER_NO) WHERE SENDER_NO = FREELANCER_NO) WHERE rum = 1) JOIN FREELANCER USING(FREELANCER_NO))
				         JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
				         WHERE (CHAT_OPENMEM_NO = FREELANCER_NO OR CLIENT_NO = FREELANCER_NO)) ON (CHAT_OPENMEM_NO = FREELANCER_NO) 
				      WHERE (CLIENT_NO=MEMBER_NO)-----------------------
				      AND SERVICE_INQUIRY_CREATE_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-6),'yyyy-mm'),'yyyy-mm') AND SYSDATE
				      UNION
				      SELECT *
				      FROM (SELECT SERVICE_NO,SERVICE_INQUIRY_NO,SERVICE_INQUIRY_CREATE_DATE,MEMBER_NO,FREELANCER_NO
				         FROM SERVICE_INQUIRY
				         JOIN SERVICE USING(SERVICE_NO))
				      JOIN (SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
							FROM (SELECT * FROM (SELECT * 
							      FROM (SELECT c.*,FREELANCER.FREELANCER_NO,
							            ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
							            FROM CHAT c JOIN FREELANCER ON(SENDER_NO = FREELANCER_NO) WHERE SENDER_NO = FREELANCER_NO) WHERE rum = 1) JOIN FREELANCER USING(FREELANCER_NO))
							JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
							WHERE (CHAT_OPENMEM_NO = FREELANCER_NO OR CLIENT_NO = FREELANCER_NO)) ON (CHAT_OPENMEM_NO = MEMBER_NO) 
				      WHERE (CLIENT_NO=FREELANCER_NO)
				      AND SERVICE_INQUIRY_CREATE_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-6),'yyyy-mm'),'yyyy-mm') AND SYSDATE))
				      RIGHT JOIN (SELECT * FROM SERVICE_INQUIRY JOIN SERVICE USING(SERVICE_NO)) USING(SERVICE_INQUIRY_NO)) 
			GROUP BY FREELANCER_NO) USING(FREELANCER_NO)) USING(FREELANCER_NO);
-------------------------------------------------------------------------------------------------
--매퍼용 --------최종 전
SELECT FREELANCER_NO,GRADE_NO,SALE_COUNT,SALE_PROCEEDS_STRING,SALE_PROCEEDS,SATISFACTION,COMPLETION_RATE,INQUIRY_RATE
FROM (SELECT FFREELANCER_NO,GRADE_NAME,GRADE_NO FROM FFREELANCER JOIN GRADE USING(GRADE_NO))
JOIN (SELECT FREELANCER_NO,NVL(SALE_COUNT,0) SALE_COUNT
	FROM FREELANCER
	LEFT JOIN (SELECT FREELANCER_NO,COUNT(*) SALE_COUNT
		FROM (SELECT * FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE  WORK_STATUS IN (3)      
			AND PAYMENT_TYPE IN (3)
			AND USER_NO = FREELANCER_NO         
			AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-6),'yyyy-mm'),'yyyy-mm')  AND SYSDATE
			UNION
			SELECT * 
			FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE WORK_STATUS IN (2)   
			AND PAYMENT_TYPE IN (2)
			AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-6),'yyyy-mm'),'yyyy-mm') AND SYSDATE)
		GROUP BY FREELANCER_NO) USING(FREELANCER_NO)) USING(FREELANCER_NO)
JOIN (SELECT FREELANCER_NO,NVL(PAYMENT_PRICE_STRING,0) SALE_PROCEEDS_STRING, NVL(PAYMENT_PRICE,0) SALE_PROCEEDS
	FROM FREELANCER
	LEFT JOIN (SELECT TO_CHAR(SUM(PAYMENT_PRICE), 'FM999,999,999,999') PAYMENT_PRICE_STRING,SUM(PAYMENT_PRICE) PAYMENT_PRICE,FREELANCER_NO
		FROM (SELECT * FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE  WORK_STATUS IN (3)      
			AND PAYMENT_TYPE IN (3)
			AND USER_NO = FREELANCER_NO         
			AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-6),'yyyy-mm'),'yyyy-mm') AND SYSDATE
			UNION 
			SELECT * FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE WORK_STATUS IN (2)      
			AND PAYMENT_TYPE IN (2)
			AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-6),'yyyy-mm'),'yyyy-mm') AND SYSDATE)
		GROUP BY FREELANCER_NO) USING(FREELANCER_NO))  USING(FREELANCER_NO)
JOIN (SELECT FREELANCER_NO,NVL(REVIEW_POINT,0) SATISFACTION
	FROM FREELANCER
	LEFT JOIN (SELECT FREELANCER_NO, ROUND(AVG(REVIEW_POINT),1) REVIEW_POINT
		FROM (SELECT REVIEW_POINT,FREELANCER_NO
			FROM REVIEW 	
			JOIN TRADE ON REVIEW_NO = TRADE_NO
			JOIN SERVICE USING(SERVICE_NO))
		GROUP BY FREELANCER_NO) USING(FREELANCER_NO)) USING(FREELANCER_NO)
JOIN (SELECT FREELANCER_NO, NVL(WORK_RATE,0) COMPLETION_RATE--,NVL(DATE_RATE,0) DATE_RATE,NVL(TRADE_COUNT,0) DATE_RATE, NVL(WORK_RATE,0) COMPLETION_RATE
	FROM FREELANCER 
	LEFT JOIN (SELECT FREELANCER_NO,SUM(DATE_RATE) DATE_RATE,COUNT(*) TRADE_COUNT ,ROUND((SUM(DATE_RATE)/COUNT(*))*100) WORK_RATE
		FROM (SELECT t.*,
			CASE WHEN SERVICE_WORK_PERIOD <![CDATA[>=]]> END_WORK_PERIOD THEN 1
				 WHEN SERVICE_WORK_PERIOD <![CDATA[<]]> END_WORK_PERIOD THEN 0
			END AS DATE_RATE
			FROM (SELECT SERVICE_WORK_PERIOD,TRADE_NO,SERVICE_NO,FREELANCER_NO, 
				TO_DATE(WORK_SEND_DATE, 'YYYY-MM-DD') - TO_DATE(PAYMENT_DATE, 'YYYY-MM-DD') END_WORK_PERIOD
				FROM FREELANCER 
				JOIN SERVICE USING(FREELANCER_NO)
				JOIN TRADE USING(SERVICE_NO)
				JOIN SETTLEMENT USING(TRADE_NO)
				LEFT JOIN (SELECT * FROM (SELECT w.*,
					ROW_NUMBER() OVER (PARTITION BY TRADE_NO ORDER BY WORK_NO) rum
					FROM "WORK"  w) WHERE rum = 1) USING(TRADE_NO)
				WHERE WORK_STATUS = 2
				AND PAYMENT_TYPE =1
				AND PAYMENT_DATE BETWEEN TO_DATE(to_char(add_months(sysdate,-6),'yyyy-mm'),'yyyy-mm') AND SYSDATE) t)
		GROUP BY FREELANCER_NO) USING(FREELANCER_NO)) USING(FREELANCER_NO)
JOIN (SELECT FREELANCER_NO,NVL(MESSAGE_RATE,0) INQUIRY_RATE
	FROM FREELANCER
	LEFT JOIN (SELECT ROUND(AVG(MESSAGE_RATE)*100) MESSAGE_RATE,FREELANCER_NO
		FROM (SELECT SERVICE_INQUIRY_NO,FREELANCER_NO,NVL(MESSAGE_RATE,0) MESSAGE_RATE
			FROM (SELECT 
			   CASE WHEN SERVICE_INQUIRY_CREATE_DATE <![CDATA[<=]]> CHAT_SEND_TIME THEN 1
			       WHEN SERVICE_INQUIRY_CREATE_DATE <![CDATA[>]]> CHAT_SEND_TIME THEN 0
			   END AS MESSAGE_RATE,FREELANCER_NO FREELANCER_NO_MESSAGE,SERVICE_INQUIRY_NO
			   FROM (SELECT *
			      FROM (SELECT SERVICE_NO,SERVICE_INQUIRY_NO,SERVICE_INQUIRY_CREATE_DATE,MEMBER_NO,FREELANCER_NO
			         FROM SERVICE_INQUIRY
			         JOIN SERVICE USING(SERVICE_NO))
			      LEFT JOIN (SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
			         FROM (SELECT * FROM (SELECT * 
						      FROM (SELECT c.*,FREELANCER.FREELANCER_NO,
						            ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
						            FROM CHAT c JOIN FREELANCER ON(SENDER_NO = FREELANCER_NO) WHERE SENDER_NO = FREELANCER_NO) WHERE rum = 1) JOIN FREELANCER USING(FREELANCER_NO))
			         JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
			         WHERE (CHAT_OPENMEM_NO = FREELANCER_NO OR CLIENT_NO = FREELANCER_NO)) ON (CHAT_OPENMEM_NO = FREELANCER_NO) 
			      WHERE (CLIENT_NO=MEMBER_NO)
			      UNION
			      SELECT *
			      FROM (SELECT SERVICE_NO,SERVICE_INQUIRY_NO,SERVICE_INQUIRY_CREATE_DATE,MEMBER_NO,FREELANCER_NO
			         FROM SERVICE_INQUIRY
			         JOIN SERVICE USING(SERVICE_NO))
			      JOIN (SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
						FROM (SELECT * FROM (SELECT * 
						      FROM (SELECT c.*,FREELANCER.FREELANCER_NO,
						            ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
						            FROM CHAT c JOIN FREELANCER ON(SENDER_NO = FREELANCER_NO) WHERE SENDER_NO = FREELANCER_NO) WHERE rum = 1) JOIN FREELANCER USING(FREELANCER_NO))
						JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
						WHERE (CHAT_OPENMEM_NO = FREELANCER_NO OR CLIENT_NO = FREELANCER_NO)) ON (CHAT_OPENMEM_NO = MEMBER_NO) 
			      WHERE (CLIENT_NO=FREELANCER_NO)))
			      RIGHT JOIN (SELECT * FROM SERVICE_INQUIRY JOIN SERVICE USING(SERVICE_NO)) USING(SERVICE_INQUIRY_NO)) 
		GROUP BY FREELANCER_NO) USING(FREELANCER_NO)) USING(FREELANCER_NO);
------------------------------------------------------
--진짜 최종!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SELECT FREELANCER_NO,GRADE_NO,GRADE_NAME,SALE_COUNT,SALE_PROCEEDS_STRING,SALE_PROCEEDS,SATISFACTION,COMPLETION_RATE,INQUIRY_RATE
FROM (SELECT FREELANCER_NO,GRADE_NAME,GRADE_NO FROM FREELANCER JOIN GRADE USING(GRADE_NO))
JOIN (SELECT FREELANCER_NO,NVL(SALE_COUNT,0) SALE_COUNT
	FROM FREELANCER
	LEFT JOIN (SELECT FREELANCER_NO,COUNT(*) SALE_COUNT
		FROM (SELECT * FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE  WORK_STATUS IN (3)      
			AND PAYMENT_TYPE IN (3)
			AND USER_NO = FREELANCER_NO         
			UNION
			SELECT * 
			FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE WORK_STATUS IN (2)   
			AND PAYMENT_TYPE IN (2))-----------------------------------------------------
		GROUP BY FREELANCER_NO) USING(FREELANCER_NO)) USING(FREELANCER_NO)
JOIN (SELECT FREELANCER_NO,NVL(PAYMENT_PRICE_STRING,0) SALE_PROCEEDS_STRING, NVL(PAYMENT_PRICE,0) SALE_PROCEEDS
	FROM FREELANCER
	LEFT JOIN (SELECT TO_CHAR(SUM(PAYMENT_PRICE), 'FM999,999,999,999') PAYMENT_PRICE_STRING,SUM(PAYMENT_PRICE) PAYMENT_PRICE,FREELANCER_NO
		FROM (SELECT * FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE  WORK_STATUS IN (3)      
			AND PAYMENT_TYPE IN (3)
			AND USER_NO = FREELANCER_NO         -----------------------------------------------------
			UNION 
			SELECT * FROM SETTLEMENT
			JOIN TRADE USING(TRADE_NO)
			JOIN SERVICE USING(SERVICE_NO)
			WHERE WORK_STATUS IN (2)      
			AND PAYMENT_TYPE IN (2))----------------------------------
		GROUP BY FREELANCER_NO) USING(FREELANCER_NO))  USING(FREELANCER_NO)
JOIN (SELECT FREELANCER_NO,NVL(REVIEW_POINT,0) SATISFACTION --리뷰 만족도
	FROM FREELANCER
	LEFT JOIN (SELECT FREELANCER_NO, ROUND(AVG(REVIEW_POINT),1) REVIEW_POINT
		FROM (SELECT REVIEW_POINT,FREELANCER_NO
			FROM REVIEW 	
			JOIN TRADE ON REVIEW_NO = TRADE_NO
			JOIN SERVICE USING(SERVICE_NO) WHERE REVIEW_CREATE_TIME BETWEEN FN_DT1 AND (ADD_MONTHS(FN_DT1, 6) - (1/86400)))
		GROUP BY FREELANCER_NO) USING(FREELANCER_NO)) USING(FREELANCER_NO)
JOIN (SELECT FREELANCER_NO, NVL(WORK_RATE,0) COMPLETION_RATE--,NVL(DATE_RATE,0) DATE_RATE,NVL(TRADE_COUNT,0) DATE_RATE, NVL(WORK_RATE,0) COMPLETION_RATE --작업물 준수율
	FROM FREELANCER 
	LEFT JOIN (SELECT FREELANCER_NO,SUM(DATE_RATE) DATE_RATE,COUNT(*) TRADE_COUNT ,ROUND((SUM(DATE_RATE)/COUNT(*))*100) WORK_RATE
		FROM (SELECT t.*,
			CASE WHEN SERVICE_WORK_PERIOD >= END_WORK_PERIOD THEN 1
				 WHEN SERVICE_WORK_PERIOD < END_WORK_PERIOD THEN 0
			END AS DATE_RATE
			FROM (SELECT SERVICE_WORK_PERIOD,TRADE_NO,SERVICE_NO,FREELANCER_NO, 
				TO_DATE(WORK_SEND_DATE, 'YYYY-MM-DD') - TO_DATE(PAYMENT_DATE, 'YYYY-MM-DD') END_WORK_PERIOD
				FROM FREELANCER 
				JOIN SERVICE USING(FREELANCER_NO)
				JOIN TRADE USING(SERVICE_NO)
				JOIN SETTLEMENT USING(TRADE_NO)
				LEFT JOIN (SELECT * FROM (SELECT w.*,
					ROW_NUMBER() OVER (PARTITION BY TRADE_NO ORDER BY WORK_NO) rum
					FROM "WORK"  w) WHERE rum = 1) USING(TRADE_NO)
				WHERE WORK_STATUS = 2
				AND PAYMENT_TYPE =1
				AND PAYMENT_DATE BETWEEN FN_DT1 AND (ADD_MONTHS(FN_DT1, 6) - (1/86400))) t)
		GROUP BY FREELANCER_NO) USING(FREELANCER_NO)) USING(FREELANCER_NO)
JOIN (SELECT FREELANCER_NO,NVL(MESSAGE_RATE,0) INQUIRY_RATE ----문의 응답률
		FROM FREELANCER
		LEFT JOIN (SELECT ROUND(AVG(MESSAGE_RATE)*100) MESSAGE_RATE,FREELANCER_NO
			FROM (SELECT SERVICE_INQUIRY_NO,FREELANCER_NO,NVL(MESSAGE_RATE,0) MESSAGE_RATE
				FROM (SELECT 
				   CASE WHEN SERVICE_INQUIRY_CREATE_DATE <= CHAT_SEND_TIME THEN 1
				       WHEN SERVICE_INQUIRY_CREATE_DATE >  CHAT_SEND_TIME THEN 0
				   END AS MESSAGE_RATE,FREELANCER_NO FREELANCER_NO_MESSAGE,SERVICE_INQUIRY_NO
				   FROM (SELECT *
				      FROM (SELECT SERVICE_NO,SERVICE_INQUIRY_NO,SERVICE_INQUIRY_CREATE_DATE,MEMBER_NO,FREELANCER_NO
				         FROM SERVICE_INQUIRY
				         JOIN SERVICE USING(SERVICE_NO))
				      LEFT JOIN (SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
				         FROM (SELECT * FROM (SELECT * 
							      FROM (SELECT c.*,FREELANCER.FREELANCER_NO,
							            ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
							            FROM CHAT c JOIN FREELANCER ON(SENDER_NO = FREELANCER_NO) WHERE SENDER_NO = FREELANCER_NO) WHERE rum = 1) JOIN FREELANCER USING(FREELANCER_NO))
				         JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
				         WHERE (CHAT_OPENMEM_NO = FREELANCER_NO OR CLIENT_NO = FREELANCER_NO)) ON (CHAT_OPENMEM_NO = FREELANCER_NO) 
				      WHERE (CLIENT_NO=MEMBER_NO)-----------------------
				      AND SERVICE_INQUIRY_CREATE_DATE BETWEEN FN_DT1 AND (ADD_MONTHS(FN_DT1, 6) - (1/86400))
				      UNION
				      SELECT *
				      FROM (SELECT SERVICE_NO,SERVICE_INQUIRY_NO,SERVICE_INQUIRY_CREATE_DATE,MEMBER_NO,FREELANCER_NO
				         FROM SERVICE_INQUIRY
				         JOIN SERVICE USING(SERVICE_NO))
				      JOIN (SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
							FROM (SELECT * FROM (SELECT * 
							      FROM (SELECT c.*,FREELANCER.FREELANCER_NO,
							            ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
							            FROM CHAT c JOIN FREELANCER ON(SENDER_NO = FREELANCER_NO) WHERE SENDER_NO = FREELANCER_NO) WHERE rum = 1) JOIN FREELANCER USING(FREELANCER_NO))
							JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
							WHERE (CHAT_OPENMEM_NO = FREELANCER_NO OR CLIENT_NO = FREELANCER_NO)) ON (CHAT_OPENMEM_NO = MEMBER_NO) 
				      WHERE (CLIENT_NO=FREELANCER_NO)
				      AND SERVICE_INQUIRY_CREATE_DATE BETWEEN FN_DT1 AND (ADD_MONTHS(FN_DT1, 6) - (1/86400))))
				      RIGHT JOIN (SELECT * FROM SERVICE_INQUIRY JOIN SERVICE USING(SERVICE_NO)) USING(SERVICE_INQUIRY_NO)) 
			GROUP BY FREELANCER_NO) USING(FREELANCER_NO)) USING(FREELANCER_NO);
		WHERE FREELANCER_NO =30;
-----------------------
SELECT FREELANCER_NO,NVL(MESSAGE_RATE,0) INQUIRY_RATE ----문의 응답률
		FROM FREELANCER
		LEFT JOIN (SELECT ROUND(AVG(MESSAGE_RATE)*100) MESSAGE_RATE,FREELANCER_NO
			FROM (SELECT SERVICE_INQUIRY_NO,FREELANCER_NO,NVL(MESSAGE_RATE,0) MESSAGE_RATE
				FROM (SELECT 
				   CASE WHEN SERVICE_INQUIRY_CREATE_DATE <= CHAT_SEND_TIME THEN 1
				       WHEN SERVICE_INQUIRY_CREATE_DATE >  CHAT_SEND_TIME THEN 0
				   END AS MESSAGE_RATE,FREELANCER_NO FREELANCER_NO_MESSAGE,SERVICE_INQUIRY_NO
				   FROM (SELECT *
				      FROM (SELECT SERVICE_NO,SERVICE_INQUIRY_NO,SERVICE_INQUIRY_CREATE_DATE,MEMBER_NO,FREELANCER_NO
				         FROM SERVICE_INQUIRY
				         JOIN SERVICE USING(SERVICE_NO))
				      LEFT JOIN (SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
				         FROM (SELECT * FROM (SELECT * 
							      FROM (SELECT c.*,FREELANCER.FREELANCER_NO,
							            ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
							            FROM CHAT c JOIN FREELANCER ON(SENDER_NO = FREELANCER_NO) WHERE SENDER_NO = FREELANCER_NO) WHERE rum = 1) JOIN FREELANCER USING(FREELANCER_NO))
				         JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
				         WHERE (CHAT_OPENMEM_NO = FREELANCER_NO OR CLIENT_NO = FREELANCER_NO)) ON (CHAT_OPENMEM_NO = FREELANCER_NO) 
				      WHERE (CLIENT_NO=MEMBER_NO)-----------------------
				      AND SERVICE_INQUIRY_CREATE_DATE BETWEEN FN_DT1 AND (ADD_MONTHS(FN_DT1, 6) - (1/86400))
				      UNION
				      SELECT *
				      FROM (SELECT SERVICE_NO,SERVICE_INQUIRY_NO,SERVICE_INQUIRY_CREATE_DATE,MEMBER_NO,FREELANCER_NO
				         FROM SERVICE_INQUIRY
				         JOIN SERVICE USING(SERVICE_NO))
				      JOIN (SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
							FROM (SELECT * FROM (SELECT * 
							      FROM (SELECT c.*,FREELANCER.FREELANCER_NO,
							            ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
							            FROM CHAT c JOIN FREELANCER ON(SENDER_NO = FREELANCER_NO) WHERE SENDER_NO = FREELANCER_NO) WHERE rum = 1) JOIN FREELANCER USING(FREELANCER_NO))
							JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
							WHERE (CHAT_OPENMEM_NO = FREELANCER_NO OR CLIENT_NO = FREELANCER_NO)) ON (CHAT_OPENMEM_NO = MEMBER_NO) 
				      WHERE (CLIENT_NO=FREELANCER_NO)
				      AND SERVICE_INQUIRY_CREATE_DATE BETWEEN FN_DT1 AND (ADD_MONTHS(FN_DT1, 6) - (1/86400))))
				      RIGHT JOIN (SELECT * FROM SERVICE_INQUIRY JOIN SERVICE USING(SERVICE_NO)) USING(SERVICE_INQUIRY_NO); 
			GROUP BY FREELANCER_NO) USING(FREELANCER_NO)) USING(FREELANCER_NO)
		WHERE FREELANCER_NO =30;	
	----------------------
-- (1/86400) == 1초
-- FN_DT1 (클라이언트용)
-- FN_DT2 (스케줄러용)
SELECT FN_DT1, ADD_MONTHS(FN_DT1, 6) - (1/86400) "FN_DT1 + 6개월",
      FN_DT2, ADD_MONTHS(FN_DT2, 6) - (1/86400) "FN_DT2 + 6개월" 
FROM DUAL;
	
-------------------------------------------------------------------------------------------
SELECT GRADE_NO,GRADE_NAME,SATISFACTION,INQUIRY_RATE,COMPLETION_RATE,SALE_PROCEEDS, TO_CHAR(SALE_PROCEEDS, 'FM999,999,999,999') SALE_PROCEEDS_STRING,SALE_COUNT FROM GRADE;
-------------------------------------------------------------------------------------------------
-- FN_DT1 (클라이언트용)
CREATE OR REPLACE FUNCTION FN_DT1
RETURN DATE
IS
   RES DATE;
BEGIN
   SELECT CASE WHEN EXTRACT(MONTH FROM SYSDATE) < 7
      THEN TO_DATE(EXTRACT(YEAR FROM SYSDATE) || '0101')
   ELSE TO_DATE(EXTRACT(YEAR FROM SYSDATE) || '0701')
   END DT
   INTO RES
   FROM DUAL;   
   RETURN RES;
END;
-- FN_DT2 (스케줄러용)
CREATE OR REPLACE FUNCTION FN_DT2
RETURN DATE
IS
   RES DATE;
BEGIN
   SELECT CASE WHEN EXTRACT(MONTH FROM SYSDATE) < 7
         THEN TO_DATE(EXTRACT(YEAR FROM SYSDATE) - 1 || '0701')
      ELSE TO_DATE(EXTRACT(YEAR FROM SYSDATE) || '0101')
      END DT
   INTO RES
   FROM DUAL;
   RETURN RES;
END;


-- (1/86400) == 1초
SELECT FN_DT1, ADD_MONTHS(FN_DT1, 6) - (1/86400) "FN_DT1 + 6개월",
      FN_DT2, ADD_MONTHS(FN_DT2, 6) - (1/86400) "FN_DT2 + 6개월" 
FROM DUAL;

---------------------------------------------------------------------------------------------------
SELECT CASE WHEN 5 < 7 THEN TO_DATE(to_char(add_months('2023-05-10',+TO_CHAR(add_months(TO_CHAR('2023-05-10','mm'),-7),'mm')),'yyyy-mm'),'yyyy-mm')
			WHEN 5 >= 7 THEN TO_DATE(to_char(add_months('2023-05-10',-TO_CHAR(add_months('2023-05-10',-7),'mm')),'yyyy-mm'),'yyyy-mm')
END 
FROM DUAL;
--------------------------
SELECT CASE WHEN 9 < 7 THEN TO_DATE(to_char(add_months('2023-09-10',-TO_CHAR(add_months('2023-09-10',-1),'mm')),'yyyy-mm'),'yyyy-mm')
			WHEN 9 >= 7 THEN TO_DATE(to_char(add_months('2023-09-10',-TO_CHAR(add_months('2023-09-10',-7),'mm')),'yyyy-mm'),'yyyy-mm')
END 
FROM DUAL;

SELECT CASE WHEN TO_CHAR(add_months(sysdate,0),'mm') < 7 THEN TO_DATE(to_char(add_months(sysdate,+TO_CHAR(add_months(sysdate,-7),'mm')),'yyyy-mm'),'yyyy-mm')
			WHEN TO_CHAR(add_months(sysdate,0),'mm') >= 7 THEN 
END 
FROM DUAL;

----
SELECT CASE WHEN TO_CHAR(add_months(sysdate,0),'mm') < 7 THEN TO_DATE(to_char(add_months(add_months(sysdate,-TO_CHAR(add_months(sysdate,0),'mm')),+1),'yyyy-mm'),'yyyy-mm')
			WHEN TO_CHAR(add_months(sysdate,0),'mm') >= 7 THEN TO_DATE(to_char(add_months(sysdate,-TO_CHAR(add_months(sysdate,-7),'mm')),'yyyy-mm'),'yyyy-mm')
END 
FROM DUAL;------------------BETWEEN 앞에 날짜 들고오기





SELECT TO_CHAR(add_months(sysdate,-1),'mm') FROM DUAL; 
----------------------------------------------------------------------------------------------------
SELECT * 
FROM MAIN_CATEGORY
JOIN SUB_CATEGORY USING(MAIN_CATEGORY_NO)
JOIN CATEGORY USING(SUB_CATEGORY_NO);
------------------------------------------------------------------------
SELECT p.*,TO_CHAR(PROJECT_REQUEST_BUDGET, 'FM999,999,999,999') PROJECT_REQUEST_BUDGETE_STRING
FROM PROJECT_REQUEST 
JOIN REQUEST_FILE USING(PROJECT_REQUEST_NO)
JOIN CATEGORY USING(THIRD_CATEGORY_NO)
JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO)
JOIN MAIN_CATEGORY USING(MAIN_CATEGORY_NO) 
WHERE PROJECT_REQUEST_STATUS = 2
AND REQUEST_FILE_ORDER =0
AND PROJECT_REQUEST_DEL_FL ='N'
ORDER BY REQUEST_RECRUIT_DATE;
-------------------------------------------------------------------------
SELECT p.*,TO_CHAR(PROJECT_REQUEST_BUDGET, 'FM999,999,999,999') PROJECT_REQUEST_BUDGET_STRING
FROM (SELECT * FROM PROJECT_REQUEST p
	JOIN REQUEST_FILE USING(PROJECT_REQUEST_NO)
	JOIN CATEGORY USING(THIRD_CATEGORY_NO)
	JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO)
	JOIN MAIN_CATEGORY USING(MAIN_CATEGORY_NO)
	JOIN "MEMBER" USING(MEMBER_NO)
	WHERE PROJECT_REQUEST_STATUS = 2
	AND MEMBER_DELETE_FL = 'N'
	ORDER BY PROJECT_REQUEST_NO) p
WHERE REQUEST_FILE_ORDER =0
AND PROJECT_REQUEST_DEL_FL ='N'
ORDER BY REQUEST_RECRUIT_DATE;
--ORDER BY PROJECT_REQUEST_CREATE_DATE DESC;-----------------최신순

SELECT COUNT(*) 
FROM (SELECT * FROM PROJECT_REQUEST p
	JOIN REQUEST_FILE USING(PROJECT_REQUEST_NO)
	JOIN CATEGORY USING(THIRD_CATEGORY_NO)
	JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO)
	JOIN MAIN_CATEGORY USING(MAIN_CATEGORY_NO)
	WHERE PROJECT_REQUEST_STATUS = 2) p
WHERE REQUEST_FILE_ORDER =0
AND PROJECT_REQUEST_DEL_FL ='N'
ORDER BY REQUEST_RECRUIT_DATE;

----------
--

SELECT p.*,TO_CHAR(PROJECT_REQUEST_BUDGET, 'FM999,999,999,999') PROJECT_REQUEST_BUDGET_STRING,
TO_DATE(to_char(REQUEST_RECRUIT_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') REQUEST_RECRUIT_DATE_STRING,
TO_DATE(to_char(REQUEST_WORK_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') REQUEST_WORK_DATE_STRING
FROM (SELECT * 
	FROM PROJECT_REQUEST 
	JOIN "MEMBER" USING(MEMBER_NO)
	LEFT JOIN PROJECT_PROPOSAL USING(PROJECT_REQUEST_NO)) p
WHERE PROJECT_REQUEST_NO=3;
-------------------
SELECT p.*,TO_CHAR(PROJECT_REQUEST_BUDGET, 'FM999,999,999,999') PROJECT_REQUEST_BUDGET_STRING,
		to_char(REQUEST_RECRUIT_DATE,'YYYY-MM-DD') REQUEST_RECRUIT_DATE_STRING,
		to_char(REQUEST_WORK_DATE,'YYYY-MM-DD') REQUEST_WORK_DATE_STRING 
FROM (SELECT * FROM PROJECT_REQUEST 
		JOIN "MEMBER" USING(MEMBER_NO)
		JOIN CATEGORY USING(THIRD_CATEGORY_NO)
		JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO)
		JOIN MAIN_CATEGORY USING(MAIN_CATEGORY_NO)
) p
WHERE PROJECT_REQUEST_NO=3;

SELECT *
FROM PROJECT_PROPOSAL
WHERE PROJECT_REQUEST_NO=2;

--------------------------------------------------------
SELECT COUNT(*) 
FROM SETTLEMENT
JOIN TRADE USING(TRADE_NO)
JOIN SERVICE USING(SERVICE_NO)
WHERE FREELANCER_NO = 30
AND WORK_STATUS IN (2)   
AND PAYMENT_TYPE IN (2);

SELECT FREELANCER_NO,GRADE_NO,GRADE_NAME
FROM FREELANCER 
JOIN GRADE USING(GRADE_NO)
WHERE FREELANCER_NO =30;

SELECT *
		FROM PROJECT_PROPOSAL
		WHERE PROJECT_REQUEST_NO=4;

SELECT *
FROM FIELD
JOIN MAIN_CATEGORY USING(MAIN_CATEGORY_NO);
------------------------------------------------------------------------
INSERT INTO "PROJECT_PROPOSAL"
VALUES(SEQ_PROJECT_PROPOSAL_NO.NEXTVAL,DEFAULT,#{가격},#{수정횟수},DEFAULT,#{의뢰번호},#{프리랜서번호}); 
----------------------------------------

UPDATE "PROJECT_REQUEST" SET
      PROJECT_REQUEST_DEL_FL = 'Y'
      WHERE PROJECT_REQUEST_NO = #{chatRoomNo};
------------------------------------------
     SELECT p.*,TO_CHAR(PROJECT_REQUEST_BUDGET, 'FM999,999,999,999') PROJECT_REQUEST_BUDGET_STRING
			FROM (SELECT * FROM PROJECT_REQUEST p
				JOIN REQUEST_FILE USING(PROJECT_REQUEST_NO)
				JOIN CATEGORY USING(THIRD_CATEGORY_NO)
				JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO)
				JOIN MAIN_CATEGORY USING(MAIN_CATEGORY_NO)
				JOIN "MEMBER" USING(MEMBER_NO)
				WHERE PROJECT_REQUEST_STATUS = 2
				AND MEMBER_DELETE_FL = 'N'
				AND PROJECT_REQUEST_BUDGET >=000
				AND PROJECT_REQUEST_BUDGET < 100000
				ORDER BY PROJECT_REQUEST_NO) p
			WHERE REQUEST_FILE_ORDER =0
			AND PROJECT_REQUEST_DEL_FL ='N';
		
	UPDATE "PROJECT_PROPOSAL" SET
   	PROPOSAL_ADOPT_STATUS = 3
   	WHERE PROJECT_REQUEST_NO =3;
   ----------------------------------------
INSERT INTO "MEMBER_REPORT"
VALUES(SEQ_MEMBER_REPORT_NO.NEXTVAL,#{제목},#{내용},NULL,DEFAULT,#{신고자},#{피신고자},DEFAULT,NULL);
---리뷰 거래 서비스 ------평점이 0인거는 NVL으로 0 
SELECT AVG(REVIEW_POINT) REVIEW_POINT,SERVICE_NO
FROM REVIEW  
LEFT JOIN TRADE ON(TRADE_NO =REVIEW_NO)
LEFT JOIN SERVICE USING(SERVICE_NO)
GROUP BY SERVICE_NO;

SELECT COUNT(*) SALE_COUNT,SERVICE_NO
FROM TRADE  
LEFT JOIN SERVICE USING(SERVICE_NO)
GROUP BY SERVICE_NO;


SELECT SERVICE_NO, MAIN_CATEGORY_NO,
	MAIN_CATEGORY_NAME,SUB_CATEGORY_NO,SUB_CATEGORY_NAME,THIRD_CATEGORY_NO,THIRD_CATEGORY_NAME,
	NVL(SALE_COUNT,0) SALE_COUNT,TO_CHAR(NVL(REVIEW_POINT,0), 'fm0.0') REVIEW_POINT,REQUEST_FILE_PATH,SERVICE_PRICE,
	TO_CHAR(SERVICE_PRICE, 'FM999,999,999,999') SERVICE_PRICE_STRING,SERVICE_TITLE,SERVICE_SUMMARY,
	CASE WHEN MEMBER_NO = 20 THEN 'Y' ELSE 'N' END AS LIKE_CHECK_FL
FROM SERVICE
JOIN CATEGORY USING(THIRD_CATEGORY_NO)
JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO)
JOIN MAIN_CATEGORY USING(MAIN_CATEGORY_NO)
LEFT JOIN (SELECT s.*,
	ROW_NUMBER() OVER (PARTITION BY SERVICE_NO ORDER BY REQUEST_FILE_NO) rum
	FROM SERVICE_FILE s) USING(SERVICE_NO) 
LEFT JOIN (SELECT AVG(REVIEW_POINT) REVIEW_POINT,SERVICE_NO
	FROM REVIEW  
	LEFT JOIN TRADE ON(TRADE_NO =REVIEW_NO)
	LEFT JOIN SERVICE USING(SERVICE_NO)
	GROUP BY SERVICE_NO) USING(SERVICE_NO)
LEFT JOIN(SELECT COUNT(*) SALE_COUNT,SERVICE_NO
	FROM TRADE  
	LEFT JOIN SERVICE USING(SERVICE_NO)
	GROUP BY SERVICE_NO) USING(SERVICE_NO)
LEFT JOIN (SELECT * FROM "LIKE" WHERE MEMBER_NO=20) USING(SERVICE_NO)
WHERE RUM = 1
AND SERVICE_STATUS =2
AND SERVICE_DEL_FL ='N';
AND SERVICE_TITLE  LIKE '%제작%';


SELECT * 
FROM PROJECT_REQUEST 
WHERE PROJECT_REQUEST_DEL_FL ='N'
AND PROJECT_REQUEST_STATUS IN (1,2)
AND REQUEST_RECRUIT_DATE < '2023-01-14';



SELECT TRADE.TRADE_NO, SERVICE_NO, SERVICE_TITLE, SERVICE_STATUS, SERVICE_DEL_FL,
   (SELECT COUNT(*) FROM WORK WHERE WORK.TRADE_NO=TRADE.TRADE_NO) WORK_COUNT,
   SERVICE_EDIT_NUM, MEMBER_DONE_FL, FREELANCER_DONE_FL, 
   MAIN_CATEGORY_NO, SUB_CATEGORY_NO, THIRD_CATEGORY_NO, FREELANCER_NO,
   WORK_STATUS, (SELECT MEMBER_NAME FROM "MEMBER" WHERE MEMBER_NO=FREELANCER_NO) FREELANCER_NAME,
   CASE WHEN MEMBER_DONE_FL=2 OR WORK_STATUS=2 OR WORK_STATUS=4 THEN '작업 완료' 
       WHEN WORK_STATUS=3 THEN '주문 취소'
       ELSE '진행중' END AS WORK_PROGRESS,
   (SELECT MEMBER_NAME FROM MEMBER WHERE MEMBER_NO=21) AS MEMBER_NAME,
   (SELECT MEMBER_NO FROM MEMBER WHERE MEMBER_NO=21) AS MEMBER_NO,
   TRADE_REPORT_NO,REPORT_PERSON,REPORTED_PERSON,TRADE_REPORT_CONTENT,REFUND_FL,TRADE_REPORT_FILE_PATH,
   TRADE_REPORT_CREATE_DATE,TRADE_REPORT_TYPE_NO,TRADE_REPORT_TYPE_NAME
   FROM TRADE
   LEFT JOIN (SELECT * FROM TRADE_REPORT JOIN TRADE_REPORT_TYPE USING(TRADE_REPORT_TYPE_NO) WHERE REPORT_PERSON = 21) t ON (TRADE.TRADE_NO =t.TRADE_NO)
   JOIN SERVICE USING (SERVICE_NO)
   JOIN SETTLEMENT ON (TRADE.TRADE_NO=SETTLEMENT.TRADE_NO)
   JOIN CATEGORY USING (THIRD_CATEGORY_NO)
   JOIN SUB_CATEGORY USING (SUB_CATEGORY_NO)
   WHERE MEMBER_NO=21
   AND PAYMENT_TYPE=1;

----------------------------------------------------
  
  SELECT MEMBER_REPORT_NO, MEMBER_REPORT_TITLE, MEMBER_REPORT_REQUEST, MEMBER_REPORT_CONTENT,
			   MEMBER_NICKNAME,MANAGER_NICKNAME,MANAGER_NO,MANAGER_PROFILE,
	    --<![CDATA[
    	CASE  
	      	WHEN SYSDATE - MEMBER_REPORT_ANSWER_DATE < 1/24/60
	      	THEN FLOOR( (SYSDATE - MEMBER_REPORT_ANSWER_DATE) * 24 * 60 * 60 ) || '초 전'
	      	WHEN SYSDATE - MEMBER_REPORT_ANSWER_DATE < 1/24
	      	THEN FLOOR( (SYSDATE - MEMBER_REPORT_ANSWER_DATE) * 24 * 60) || '분 전'
	      	WHEN SYSDATE - MEMBER_REPORT_ANSWER_DATE < 1
	      	THEN FLOOR( (SYSDATE - MEMBER_REPORT_ANSWER_DATE) * 24) || '시간 전'
	      	ELSE TO_CHAR(MEMBER_REPORT_ANSWER_DATE, 'YYYY"년" MM"월" DD"일"')
		END MEMBER_REPORT_ANSWER_DATE_STRING,
		--]]>	   	
  		---<![CDATA[
    	CASE  
	      	WHEN SYSDATE - MEMBER_REPORT_CREATE_DATE < 1/24/60
	      	THEN FLOOR( (SYSDATE - MEMBER_REPORT_CREATE_DATE) * 24 * 60 * 60 ) || '초 전'
	      	WHEN SYSDATE - MEMBER_REPORT_CREATE_DATE < 1/24
	      	THEN FLOOR( (SYSDATE - MEMBER_REPORT_CREATE_DATE) * 24 * 60) || '분 전'
	      	WHEN SYSDATE - MEMBER_REPORT_CREATE_DATE < 1
	      	THEN FLOOR( (SYSDATE - MEMBER_REPORT_CREATE_DATE) * 24) || '시간 전'
	      	ELSE TO_CHAR(MEMBER_REPORT_CREATE_DATE, 'YYYY"년" MM"월" DD"일"')
		END MEMBER_REPORT_CREATE_DATE_STRING
		--]]>	   	
		FROM (SELECT * FROM MEMBER_REPORT ORDER BY MEMBER_REPORT_CREATE_DATE DESC)
		JOIN MEMBER ON (REPORT_MEMBER=MEMBER_NO)
		LEFT JOIN (SELECT MEMBER_NICKNAME MANAGER_NICKNAME,MEMBER.MEMBER_NO MANAGER_NO,MEMBER_PROFILE MANAGER_PROFILE,MEMBER_REPORT_NO
		FROM MEMBER_REPORT 
		LEFT JOIN MEMBER ON MEMBER.MEMBER_NO=MEMBER_REPORT.MEMBER_REPORT_ANSWER_MEMBER_NO) USING(MEMBER_REPORT_NO)
		WHERE MEMBER_REPORT_NO = 7
		ORDER BY MEMBER_REPORT_CREATE_DATE DESC;


SELECT ROWNUM,MEMBER_REPORT_NO, MEMBER_REPORT_TITLE, MEMBER_NICKNAME,MEMBER_REPORT_REQUEST,
		       MEMBER_REPORT_CONTENT,
  			   TO_CHAR(MEMBER_REPORT_CREATE_DATE, 'YYYY-MM-DD') MEMBER_REPORT_CREATE_DATE_STRING, 
  			   CASE WHEN MEMBER_REPORT_REQUEST IS NULL THEN '답변 대기'
	                WHEN MEMBER_REPORT_REQUEST IS NOT NULL THEN '답변 완료'
	            END AS MEMBER_REPORT_REQUEST_STATUS      
		FROM (SELECT * FROM MEMBER_REPORT ORDER BY MEMBER_REPORT_CREATE_DATE DESC) 
		JOIN MEMBER ON(MEMBER_NO = REPORT_MEMBER)
		WHERE MEMBER_NO = 80;