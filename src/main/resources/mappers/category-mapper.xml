<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="categoryMapper">



	<!-- 서비스 상세조회때의 rm -->
	<resultMap type="Service" id="service_rm">
    	 <id property="serviceNo" column="SERVICE_NO"/>													<!-- 서비스 번호 SEQUENCE: SEQ_SERVICE_NO -->	
    		   		
	      <result property="serviceTitle" column="SERVICE_TITLE" />								<!-- 서비스 제목 -->							
	      <result property="serviceSummary" column="SERVICE_SUMMARY" />						<!-- 서비스 한 줄 요약 -->
	      <result property="serviceContent" column="SERNICE_CONTENT" />						<!-- 서비스 내용 -->
	      <result property="servicePrice" column="SERVICE_PRICE"/>								<!-- 서비스 가격 -->
	      <result property="servicePriceString" column="SERVICE_PRICE_STRING"/>		<!-- 서비스 가격 문자 형태 1,000-->
	      <result property="serviceEditNum" column="SERVICE_EDIT_NUM"/>						<!-- 서비스 수정 횟수 -->
	      <result property="serviceWorkPeriod" column="SERVICE_WORK_PERIOD" />		<!-- 서비스 작업 일수 -->
	      <result property="serviceCreateDate" column="SERVICE_CREATE_DATE" />		<!-- 서비스 작업 일수 -->
	      <result property="requestFilePath" column="REQUEST_FILE_PATH" />		<!-- 서비스 작업 일수 -->
	     
	      
	         <!-- 카테고리 -->
	      <result property="mainCategoryNo" column="MAIN_CATEGORY_NO" />								<!-- 메인 1카테고리 -->
	      <result property="mainCategoryName" column="MAIN_CATEGORY_NAME" />						<!-- 메인 1카테고리 이름 -->
	      <result property="subCategoryNo" column="SUB_CATEGORY_NO" />									<!-- 메인 2카테고리 -->
	      <result property="subCategoryName" column="SUB_CATEGORY_NAME" />							<!-- 메인 2카테고리 이름  -->
	      <result property="thirdCategoryNo" column="THIRD_CATEGORY_NO" />							<!-- 메인 3카테고리 -->	
	      <result property="thirdCategoryName" column="THIRD_CATEGORY_NAME" />					<!-- 메인 3카테고리 이름-->
	      
	      <result property="memberName" column="MEMBER_NAME" />					
	      <result property="memberProfile" column="MEMBER_PROFILE" />			
	      <result property="freelancerNo" column="FREELANCER_NO" />				
	      <result property="tradeNo" column="TRADE_NO" />				
	      <result property="memberNo" column="MEMBER_NO" />				
	      <result property="serviceDeleteFL" column="SERVICE_DEL_FL" />				
	      <result property="likeCheckFL" column="LIKE_CHECK_FL" />				
	     
	      <result property="freeContactTime1" column="FREE_CONTACT_TIME1" />				
	      <result property="freeContactTime2" column="FREE_CONTACT_TIME2" />				
	      
	      <result property="reviewPoint" column="REVIEW_POINT" />				
	      <result property="sellCount" column="SALE_COUNT" />				
	      
	      
	      
	      <collection property="imageFileList" 
	      javaType="java.util.ArrayList" ofType="ImageFile"
	      select="selectImageFileList"
	      column="SERVICE_NO"/> 
	      
	      
	      <collection property="reviewList" 
	      javaType="java.util.ArrayList" ofType="Review"
	      select="selectReviewList"
	      column="SERVICE_NO"/>
	      
	      <collection property="portfolioList" 
	      javaType="java.util.ArrayList" ofType="Portfolio"
	      select="selectPortfolioList"
	      column="FREELANCER_NO"/> 
	      
    </resultMap>
    
    
    <!-- 리스트 볼 때 -->
	<resultMap type="Service" id="service_rm2">
    	 <id property="serviceNo" column="SERVICE_NO"/>													<!-- 서비스 번호 SEQUENCE: SEQ_SERVICE_NO -->	
    		   		
	      <result property="serviceTitle" column="SERVICE_TITLE" />								<!-- 서비스 제목 -->							
	      <result property="serviceSummary" column="SERVICE_SUMMARY" />						<!-- 서비스 한 줄 요약 -->
	      <result property="serviceContent" column="SERNICE_CONTENT" />						<!-- 서비스 내용 -->
	      <result property="servicePrice" column="SERVICE_PRICE"/>								<!-- 서비스 가격 -->
	      <result property="servicePriceString" column="SERVICE_PRICE_STRING"/>		<!-- 서비스 가격 문자 형태 1,000-->
	      <result property="serviceEditNum" column="SERVICE_EDIT_NUM"/>						<!-- 서비스 수정 횟수 -->
	      <result property="serviceWorkPeriod" column="SERVICE_WORK_PERIOD" />		<!-- 서비스 작업 일수 -->
	      <result property="serviceCreateDate" column="SERVICE_CREATE_DATE" />		<!-- 서비스 작업 일수 -->
	      <result property="requestFilePath" column="REQUEST_FILE_PATH" />		<!-- 서비스 작업 일수 -->
	     
	      
	         <!-- 카테고리 -->
	      <result property="mainCategoryNo" column="MAIN_CATEGORY_NO" />								<!-- 메인 1카테고리 -->
	      <result property="mainCategoryName" column="MAIN_CATEGORY_NAME" />						<!-- 메인 1카테고리 이름 -->
	      <result property="subCategoryNo" column="SUB_CATEGORY_NO" />									<!-- 메인 2카테고리 -->
	      <result property="subCategoryName" column="SUB_CATEGORY_NAME" />							<!-- 메인 2카테고리 이름  -->
	      <result property="thirdCategoryNo" column="THIRD_CATEGORY_NO" />							<!-- 메인 3카테고리 -->	
	      <result property="thirdCategoryName" column="THIRD_CATEGORY_NAME" />					<!-- 메인 3카테고리 이름-->
	      
	      <result property="memberName" column="MEMBER_NAME" />					
	      <result property="memberProfile" column="MEMBER_PROFILE" />			
	      <result property="freelancerNo" column="FREELANCER_NO" />				
	      <result property="tradeNo" column="TRADE_NO" />				
	      <result property="memberNo" column="MEMBER_NO" />				
	      <result property="serviceDeleteFL" column="SERVICE_DEL_FL" />				
	      <result property="likeCheckFL" column="LIKE_CHECK_FL" />				
	     
	      <result property="freeContactTime1" column="FREE_CONTACT_TIME1" />				
	      <result property="freeContactTime2" column="FREE_CONTACT_TIME2" />				
	      
	      <result property="reviewPoint" column="REVIEW_POINT" />				
	      <result property="sellCount" column="SALE_COUNT" />				
	      
    </resultMap>
    
    
    
  <resultMap type="ImageFile" id="imageFile_rm">
      <id property="imageFileNo" column="REQUEST_FILE_NO"/>
      <result property="imageFilePath" column="REQUEST_FILE_PATH"/>
      
      <result property="serviceNo" column="SERVICE_NO"/>
   </resultMap>
   
  <resultMap type="Review" id="review_rm">
      <id property="reviewNo" column="REVIEW_NO"/>
      <result property="reviewContent" column="REVIEW_CONTENT"/>
      <result property="reviewFilePath" column="REVIEW_IMAGE"/>
      <result property="reviewPoint" column="REVIEW_POINT"/>
      <result property="freelancerName" column="FREELANCER_NAME"/>
      <result property="memberName" column="MEMBER_NAME"/>
      <result property="reviewCreateTime" column="REVIEW_CREATE_TIME"/>
      
      <result property="reviewCommentContent" column="REVIEW_COMMENT_CONTENT"/>
      <result property="reviewCommentCreateTime" column="REVIEW_COMMENT_CREATE_TIME"/>
      
      <result property="reviewStatus" column="REVIEW_STATUS"/>
      
      <result property="serviceNo" column="SERVICE_NO"/>
   </resultMap>
   
   
  <resultMap type="AskService" id="askService_rm">
      <id property="serviceInquiryNo" column="SERVICE_INQUIRY_NO"/>
      <result property="serviceInquiryContent" column="SERVICE_INQUIRY_CONTENT"/>
      <result property="serviceInquiryCreateDate" column="SERVICE_INQUIRY_CREATE_DATE"/>
      <result property="memberNo" column="MEMBER_NO"/>
      <result property="serviceNo" column="SERVICE_NO"/>
      <result property="serviceTitle" column="SERVICE_TITLE"/>
      <result property="serviceSummary" column="SERVICE_SUMMARY"/>
      <result property="requestFilePath" column="REQUEST_FILE_PATH" />		<!-- 서비스 작업 일수 -->
   </resultMap>
   
  <resultMap type="Trade" id="trade_rm">
    	 <id property="tradeNo" column="TRADE_NO"/>													<!-- 서비스 번호 SEQUENCE: SEQ_SERVICE_NO -->	
    		   		
	      <result property="serviceNO" column="SERVICE_NO" />								<!-- 서비스 제목 -->							
	      <result property="serviceTitle" column="SERVICE_TITLE" />								<!-- 서비스 제목 -->							
	      <result property="serviceSummary" column="SERVICE_SUMMARY" />						<!-- 서비스 한 줄 요약 -->
	      <result property="serviceContent" column="SERNICE_CONTENT" />						<!-- 서비스 내용 -->
	      <result property="servicePrice" column="SERVICE_PRICE"/>								<!-- 서비스 가격 -->
	    
	      <result property="requestFilePath" column="REQUEST_FILE_PATH" />		
	     
	      
	      
	      <result property="memberName" column="MEMBER_NAME" />					
	      <result property="memberProfile" column="MEMBER_PROFILE" />			
	      <result property="freelancerNo" column="FREELANCER_NO" />				
	      <result property="tradeNo" column="TRADE_NO" />				
	      <result property="memberNo" column="MEMBER_NO" />		
	      		
	      <result property="tradeRequest" column="TRADE_REQUEST" />				
	     
    </resultMap>
    
    
    
    
    
  <resultMap type="Freelancer1" id="freelancer1_rm">
    	 <id property="freelancerNo" column="FREELANCER_NO"/>													<!-- 서비스 번호 SEQUENCE: SEQ_SERVICE_NO -->	
    		   		
	      <result property="freelancerName" column="FREELANCER_NAME" />								<!-- 서비스 제목 -->							
	      <result property="gradeName" column="GRADE_NAME" />								<!-- 서비스 제목 -->							
	      <result property="freelancerField" column="FREELANCER_FIELD" />						<!-- 서비스 한 줄 요약 -->
	     
	      <result property="freelancerIntro" column="FREELANCER_INTRODUCTION" />						<!-- 서비스 내용 -->
	     
	      <result property="freelancerPeriod" column="FREELANCER_PERIOD" />		<!-- 서비스 작업 일수 -->
	      <result property="regionName" column="REGION_NAME" />				
	      <result property="memberProfile" column="MEMBER_PROFILE" />				
	      <result property="saleCount" column="SALE_COUNT" />				
	      
	     
	      
	      <collection property="careerList" 
	      javaType="java.util.ArrayList" ofType="Career"
	      select="selectCareerList"
	      column="FREELANCER_NO"/> 
	      
	      <collection property="licenseList" 
	      javaType="java.util.ArrayList" ofType="License"
	      select="selectLicenseList"
	      column="FREELANCER_NO"/> 
	      
	      <collection property="majorList" 
	      javaType="java.util.ArrayList" ofType="Major"
	      select="selectMajorList"
	      column="FREELANCER_NO"/> 
	      
	      <collection property="portfolioList" 
	      javaType="java.util.ArrayList" ofType="Portfolio"
	      select="selectPortfolioList"
	      column="FREELANCER_NO"/> 
	      
	      
	       <collection property="fserviceList" 
	      javaType="java.util.ArrayList" ofType="FService"
	      select="selectFServiceList"
	      column="FREELANCER_NO"/>
	      
	      
    </resultMap>
    
    
    
    <resultMap  type="License" id="license_rm">
    	  <id property="licenseNo" column="LICENSE_NO"/>
	      <result property="licenseName" column="LICENSE_NAME"/>
	      <result property="licenseDate" column="LICENSE_DATE"/>
	      <result property="licenseAgency" column="LICENSE_AGENCY"/>
    </resultMap>
    
    <resultMap  type="Major" id="major_rm">
    	  <id property="majorNo" column="MAJOR_NO"/>
	      <result property="majorAcademyName" column="ACADEMY_NAME"/>
	      <result property="majorName" column="MAJOR_NAME"/>
	      <result property="majorGraduateStatus" column="GRADUATE_STATUS"/>
    </resultMap>
    
    <resultMap  type="Portfolio" id="portfolio_rm">
    	  <id property="portfolioNo" column="PORTFOLIO_NO"/>
	      <result property="portfolioTitle" column="PORTFOLIO_TITLE"/>
	      <result property="portfolioContent" column="PORTFOLIO_CONTENT"/>
	      <result property="portfolioFilePath" column="PORTFOLIO_FILE_PATH"/>
	      <result property="portfolioThumbnail" column="PORTFOLIO_THUMBNAIL"/>
    </resultMap>
    
    
    
    <resultMap  type="Career" id="career_rm">
    	  <id property="careerNo" column="CAREER_NO"/>
	      <result property="careerCompanyName" column="CAREER_COMPANY"/>
	      <result property="careerCompanyDepartment" column="CAREER_DEPARTMENT"/>
	      <result property="careerCompanyPosition" column="CAREER_POSITION"/>
	      <result property="careerCompanyRegion" column="CAREER_REGION"/>
	      <result property="careerCompanyPeriod1" column="CAREER_PERIOD"/>
    </resultMap>
    
    <resultMap  type="FService" id="fservice_rm">
    	 <id property="serviceNo" column="SERVICE_NO"/>													<!-- 서비스 번호 SEQUENCE: SEQ_SERVICE_NO -->	
    		   		
	      <result property="serviceTitle" column="SERVICE_TITLE" />								<!-- 서비스 제목 -->							
	      <result property="serviceSummary" column="SERVICE_SUMMARY" />
    	  <result property="requestFilePath" column="REQUEST_FILE_PATH" />	
    	  <result property="serviceDeleteFL" column="SERVICE_DEL_FL" />	
    	   <result property="reviewCount" column="REVIEW_COUNT" />	
    	   <result property="reviewPoint" column="REVIEW_POINT" />	
    	  <result property="sellCount" column="SALE_COUNT" />	
    	 <!-- <result property="servicePoint" column="SERVICE_POINT" />	 -->
    </resultMap>
    
	


  <select id="selectMainCategoryList" resultType="map">
 	SELECT * FROM MAIN_CATEGORY
 	ORDER BY 1
 
 </select>
 
 
  <select id="selectSubCategoryList" resultType="map">
 
 	SELECT * FROM SUB_CATEGORY
 	ORDER BY 1
 </select>
  <select id="selectThirdCategoryList" resultType="map">
 
 	SELECT * FROM CATEGORY
 	ORDER BY 1
 </select>
 
 
 
 <select id="selectBoardList" resultMap="service_rm2"> 
	
		SELECT SERVICE_NO,
		
		<if test='memberNo!=null'>
		CASE WHEN MEMBER_NO = #{memberNo} THEN 'Y' ELSE 'N' END AS LIKE_CHECK_FL,
		</if>
	
		SERVICE_TITLE,SERVICE_SUMMARY,SERVICE_PRICE,
		TO_CHAR(SERVICE_PRICE, 'FM999,999,999,999') SERVICE_PRICE_STRING,
		NVL(SALE_COUNT,0) SALE_COUNT,TO_CHAR(NVL(REVIEW_POINT,0), 'fm0.0') REVIEW_POINT,
			THIRD_CATEGORY_NO,FREELANCER_NO,REQUEST_FILE_NO,REQUEST_FILE_PATH,MAIN_CATEGORY_NO
		FROM (SELECT * 
			FROM SERVICE
			LEFT JOIN CATEGORY USING(THIRD_CATEGORY_NO)
			LEFT JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO))
		<if test='memberNo!=null'>
			LEFT JOIN (SELECT * FROM "LIKE" WHERE MEMBER_NO=#{memberNo}) USING(SERVICE_NO)
		</if>
		LEFT JOIN (SELECT s.*,
		ROW_NUMBER() OVER (PARTITION BY SERVICE_NO ORDER BY REQUEST_FILE_NO) rum
		FROM SERVICE_FILE s) USING(SERVICE_NO)
		LEFT JOIN (SELECT AVG(REVIEW_POINT) REVIEW_POINT,SERVICE_NO
		   FROM REVIEW  
		   LEFT JOIN TRADE ON(TRADE_NO =REVIEW_NO)
		   LEFT JOIN SERVICE USING(SERVICE_NO)
		   GROUP BY SERVICE_NO) USING(SERVICE_NO)
		LEFT JOIN(SELECT COUNT(*) SALE_COUNT,SERVICE_NO
		   FROM TRADE  
		   LEFT JOIN SERVICE USING(SERVICE_NO)
		   GROUP BY SERVICE_NO) USING(SERVICE_NO)
		WHERE RUM = 1
		AND MAIN_CATEGORY_NO=#{mainCategoryNo}
		<if test='thirdCategoryNo!=0'> AND THIRD_CATEGORY_NO=#{thirdCategoryNo} </if>
		AND SERVICE_DEL_FL='N'
		AND SERVICE_STATUS=2
		ORDER BY 1 DESC
 </select>
 	
 	
 	<!-- 서비스 상세보기 -->
 	<select id="viewService" resultMap="service_rm">
		SELECT SERVICE_NO,
		FREELANCER_NO, FREE_CONTACT_TIME1,FREE_CONTACT_TIME2, (SELECT MEMBER_NAME FROM "MEMBER" WHERE MEMBER_NO=FREELANCER_NO) MEMBER_NAME,
	   (SELECT MEMBER_PROFILE FROM "MEMBER" WHERE MEMBER_NO=FREELANCER_NO) MEMBER_PROFILE,
	   SERVICE_EDIT_NUM,SERVICE_WORK_PERIOD,SERVICE_CREATE_DATE, THIRD_CATEGORY_NAME, SUB_CATEGORY_NAME, MAIN_CATEGORY_NAME,
		SERVICE_TITLE,SERVICE_SUMMARY,SERNICE_CONTENT,SERVICE_PRICE,SERVICE_DEL_FL,
			THIRD_CATEGORY_NO,FREELANCER_NO,REQUEST_FILE_NO,REQUEST_FILE_PATH,MAIN_CATEGORY_NO
		FROM (SELECT * 
			FROM SERVICE
			LEFT JOIN CATEGORY USING(THIRD_CATEGORY_NO)
			LEFT JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO))
			LEFT JOIN MAIN_CATEGORY USING(MAIN_CATEGORY_NO)
		LEFT JOIN (SELECT s.*,
		ROW_NUMBER() OVER (PARTITION BY SERVICE_NO ORDER BY REQUEST_FILE_NO) rum
		FROM SERVICE_FILE s) USING(SERVICE_NO)
		JOIN FREELANCER USING(FREELANCER_NO)
		WHERE RUM = 1
		AND SERVICE_DEL_FL='N'
		AND SERVICE_STATUS=2
		AND SERVICE_NO=#{serviceNo}
	</select> 
	
	<!-- 서비스 이미지 조회 -->
	<select id="selectImageFileList" resultMap="imageFile_rm">
	
		SELECT * FROM SERVICE_FILE
		WHERE SERVICE_NO=#{serviceNo}
		 
	</select>
	
	<!-- 서비스 리뷰 조회 -->
	<select id="selectReviewList" resultMap="review_rm">
	
		SELECT REVIEW_NO,(SELECT MEMBER_NAME  FROM "MEMBER" WHERE MEMBER_NO=TRADE.MEMBER_NO) MEMBER_NAME, REVIEW_STATUS
	,(SELECT MEMBER_PROFILE  FROM "MEMBER" WHERE MEMBER_NO=TRADE.MEMBER_NO) MEMBER_PROFILE
		,REVIEW_CONTENT,REVIEW_IMAGE, REVIEW_POINT, TO_CHAR(REVIEW_CREATE_TIME,'YYYY-MM-DD') REVIEW_CREATE_TIME
		,(SELECT MEMBER_NAME  FROM "MEMBER" WHERE MEMBER_NO=FREELANCER_NO) FREELANCER_NAME, REVIEW_COMMENT_CONTENT, 
		TO_CHAR(REVIEW_COMMENT_CREATE_TIME ,'YYYY-MM-DD') REVIEW_COMMENT_CREATE_TIME 
		FROM REVIEW
		LEFT JOIN REVIEW_COMMENT ON(REVIEW_NO=REVIEW_COMMENT_NO)
		JOIN TRADE ON(REVIEW_NO=TRADE_NO)
		JOIN SERVICE USING(SERVICE_NO) 
		WHERE SERVICE_NO=#{serviceNo}
		AND REVIEW_STATUS!=3
		ORDER BY 1 DESC
	
		 
	</select>
	
	
	<!-- 서비스 문의  -->
	<insert id="askService">
		INSERT INTO SERVICE_INQUIRY
		VALUES(SEQ_SERVICE_INQUIRY_NO.NEXTVAL,#{serviceInquiryContent},DEFAULT, #{memberNo}, #{serviceNo} )
	
	</insert>
	
	<!-- 서비스 중단 -->
	<update id="pauseService">
		UPDATE SERVICE SET SERVICE_DEL_FL='Y'
		WHERE SERVICE_NO=#{serviceNo}
	
	</update>
	
	<!-- 서비스 문의 보기 -->
	<select id="selectSendSuggesion" resultMap="askService_rm">
		SELECT SERVICE_NO, MEMBER_NO,SERVICE_INQUIRY_CONTENT, SERVICE_TITLE, SERVICE_SUMMARY, SERVICE_INQUIRY_NO,
		 TO_CHAR(SERVICE_INQUIRY_CREATE_DATE, 'YYYY"-"MM"-"DD') SERVICE_INQUIRY_CREATE_DATE
		FROM SERVICE_INQUIRY 
		JOIN SERVICE USING(SERVICE_NO)
		WHERE MEMBER_NO=#{memberNo}
		ORDER BY 1 DESC
	</select>
	
	
	<!-- ajax 찜하기 체크 -->
	<select id="serviceLikeCheck" resultType="_int">
	 SELECT COUNT(*) FROM "LIKE"
	 WHERE SERVICE_NO=#{serviceNo}
	 AND MEMBER_NO=#{memberNo}
	</select>
	
	<!-- ajax 찜하기 + -->
	  <insert id="serviceLikeUp">
	  	INSERT INTO "LIKE"
	  	VALUES(#{serviceNo},#{memberNo})
	  </insert>
	  
	  <!-- ajax 찜하기 - -->
		<delete id="serviceLikeDown">
	  	DELETE FROM "LIKE"
			WHERE SERVICE_NO=#{serviceNo}
			AND MEMBER_NO=#{memberNo}
	  </delete>
 

 	
 	 <!-- 찜한 목록 조회 -->
   <select id="selectLikeList" resultMap="service_rm">
	 SELECT *
	FROM (
	   SELECT SERVICE_NO, REQUEST_FILE_PATH,(ROW_NUMBER() OVER(PARTITION BY SERVICE_NO ORDER BY REQUEST_FILE_PATH)) RNUM
	   ,SERVICE_TITLE,SERVICE_SUMMARY,SERNICE_CONTENT,SERVICE_PRICE
		FROM SERVICE_FILE
		JOIN SERVICE USING(SERVICE_NO)
	) JOIN "LIKE" USING(SERVICE_NO)
	WHERE RNUM =1
	AND MEMBER_NO=#{memberNo}
	</select>
	
	
	
	<!-- ajax 분류에 따라 조회되게 -->
	<select id="selectCategoryList" resultMap="service_rm2">

		SELECT SERVICE_NO, MAIN_CATEGORY_NO,
		<if test='memberNo!=null'>
		CASE WHEN MEMBER_NO = #{memberNo} THEN 'Y' ELSE 'N' END AS LIKE_CHECK_FL,
		</if>
	   MAIN_CATEGORY_NAME,SUB_CATEGORY_NO,SUB_CATEGORY_NAME,THIRD_CATEGORY_NO,THIRD_CATEGORY_NAME,
	   NVL(SC.SALE_COUNT,0) SALE_COUNT,TO_CHAR(NVL(REVIEW_POINT,0), 'fm0.0') REVIEW_POINT,REQUEST_FILE_PATH,SERVICE_PRICE,
	   TO_CHAR(SERVICE_PRICE, 'FM999,999,999,999') SERVICE_PRICE_STRING,SERVICE_TITLE,SERVICE_SUMMARY
		FROM SERVICE
		JOIN CATEGORY USING(THIRD_CATEGORY_NO)
		JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO)
		JOIN MAIN_CATEGORY USING(MAIN_CATEGORY_NO)
		<if test='memberNo!=null'>
			LEFT JOIN (SELECT * FROM "LIKE" WHERE MEMBER_NO=#{memberNo}) USING(SERVICE_NO)
		</if>
		JOIN FREELANCER USING(FREELANCER_NO)
		JOIN GRADE USING(GRADE_NO)
		LEFT JOIN (SELECT s.*,
		   ROW_NUMBER() OVER (PARTITION BY SERVICE_NO ORDER BY REQUEST_FILE_NO) rum
		   FROM SERVICE_FILE s) USING(SERVICE_NO) 
		LEFT JOIN (SELECT AVG(REVIEW_POINT) REVIEW_POINT,SERVICE_NO
		   FROM REVIEW  
		   LEFT JOIN TRADE ON(TRADE_NO =REVIEW_NO)
		   LEFT JOIN SERVICE USING(SERVICE_NO)
		   GROUP BY SERVICE_NO) USING(SERVICE_NO)
		LEFT JOIN(SELECT COUNT(*) SALE_COUNT,SERVICE_NO
		   FROM TRADE  
		   LEFT JOIN SERVICE USING(SERVICE_NO)
		   GROUP BY SERVICE_NO) SC USING(SERVICE_NO)
		WHERE RUM = 1
		AND MAIN_CATEGORY_NO=#{mainCategoryNo}
		<if test="thirdCategoryNo!=0">AND THIRD_CATEGORY_NO=#{thirdCategoryNo}</if>
		AND SERVICE_DEL_FL='N'
		AND SERVICE_STATUS=2
		<choose>
			<when test="budget==0"></when>
			<when test="budget==1"><![CDATA[AND SERVICE_PRICE < 10000]]> </when>
			<when test="budget==5">AND SERVICE_PRICE BETWEEN 10000 AND 50000 </when>
			<when test="budget==10">AND SERVICE_PRICE BETWEEN 50000 AND 100000  </when>
			<when test="budget==20">AND SERVICE_PRICE BETWEEN 100000 AND 200000  </when>
			<when test="budget==30">AND SERVICE_PRICE BETWEEN 200000 AND 300000  </when>
			<when test="budget==50">AND SERVICE_PRICE BETWEEN 300000 AND 500000  </when>
			<when test="budget==70">AND SERVICE_PRICE BETWEEN 500000 AND 700000  </when>
			<when test="budget==100">AND SERVICE_PRICE BETWEEN 700000 AND 1000000  </when>
			<otherwise><![CDATA[AND SERVICE_PRICE <1000000 ]]>  </otherwise>
		</choose>
		
		<choose>
			<when test="grade==0"></when>
			<when test="grade==1">AND GRADE_NO =1 </when>
			<otherwise>AND GRADE_NO=2</otherwise>
		</choose>
		
		<choose>
			<when test="order==0">ORDER BY 1 DESC</when>
			<when test="order==1">ORDER BY REVIEW_POINT </when>
			<otherwise></otherwise>
		</choose>
	</select>
	
	
	<!-- 메인화면 리스트 조회 -->
	<select id="serviceList" resultMap="service_rm2">
		SELECT SERVICE_NO, MAIN_CATEGORY_NO,
		<if test='memberNo!=null'>
		CASE WHEN MEMBER_NO = #{memberNo} THEN 'Y' ELSE 'N' END AS LIKE_CHECK_FL,
		</if>
	   MAIN_CATEGORY_NAME,SUB_CATEGORY_NO,SUB_CATEGORY_NAME,THIRD_CATEGORY_NO,THIRD_CATEGORY_NAME,
	   NVL(SALE_COUNT,0) SALE_COUNT,TO_CHAR(NVL(REVIEW_POINT,0), 'fm0.0') REVIEW_POINT,REQUEST_FILE_PATH,SERVICE_PRICE,
	   TO_CHAR(SERVICE_PRICE, 'FM999,999,999,999') SERVICE_PRICE_STRING,SERVICE_TITLE,SERVICE_SUMMARY
		FROM SERVICE
		JOIN CATEGORY USING(THIRD_CATEGORY_NO)
		JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO)
		JOIN MAIN_CATEGORY USING(MAIN_CATEGORY_NO)
		  <if test='memberNo!=null'>
			LEFT JOIN (SELECT * FROM "LIKE" WHERE MEMBER_NO=#{memberNo}) USING(SERVICE_NO)
		</if>
		LEFT JOIN (SELECT s.*,
		   ROW_NUMBER() OVER (PARTITION BY SERVICE_NO ORDER BY REQUEST_FILE_NO) rum
		   FROM SERVICE_FILE s) USING(SERVICE_NO) 
		LEFT JOIN (SELECT AVG(REVIEW_POINT) REVIEW_POINT,SERVICE_NO
		   FROM REVIEW  
		   LEFT JOIN TRADE ON(TRADE_NO =REVIEW_NO)
		   LEFT JOIN SERVICE USING(SERVICE_NO)
		   GROUP BY SERVICE_NO) USING(SERVICE_NO)
		LEFT JOIN(SELECT COUNT(*) SALE_COUNT,SERVICE_NO
		   FROM TRADE  
		   LEFT JOIN SERVICE USING(SERVICE_NO)
		   GROUP BY SERVICE_NO) USING(SERVICE_NO)
		WHERE RUM = 1
		AND SERVICE_STATUS =2
		AND SERVICE_DEL_FL ='N'
	</select>
	
	
	<!-- 페이징을 위한 서비스 개수 세기 -->
	<select id="getListCount" resultType="Integer">
	
		SELECT COUNT(*)
		FROM (SELECT * 
			FROM SERVICE
			LEFT JOIN CATEGORY USING(THIRD_CATEGORY_NO)
			LEFT JOIN SUB_CATEGORY USING(SUB_CATEGORY_NO))
		LEFT JOIN (SELECT s.*,
		ROW_NUMBER() OVER (PARTITION BY SERVICE_NO ORDER BY REQUEST_FILE_NO) rum
		FROM SERVICE_FILE s) USING(SERVICE_NO)
		WHERE RUM = 1
		AND SERVICE_DEL_FL='N'
		AND SERVICE_STATUS=2 
		<if test='mainCategoryNo!=null'> AND MAIN_CATEGORY_NO=#{mainCategoryNo} </if>
		<if test='thirdCategoryNo!=null and thirdCategoryNo!=0'> AND THIRD_CATEGORY_NO=#{thirdCategoryNo} </if>

	
	</select>
	
	
	<insert id="tradeComplete" parameterType="Trade" useGeneratedKeys="true">
	
		 	<selectKey keyProperty="tradeNo" resultType="_int" order="BEFORE">
		  		SELECT SEQ_TRADE_NO.NEXTVAL FROM DUAL
		  	</selectKey>
			
		INSERT INTO TRADE VALUES(#{tradeNo}, DEFAULT, DEFAULT, #{serviceNo}, #{memberNo}, #{tradeRequest})
	</insert>
	
	<insert id="insertSettlement" parameterType="Trade" >
			
		INSERT INTO SETTLEMENT VALUES(SEQ_SETTLEMENT_NO.NEXTVAL, 1, #{memberNo}, 1, SYSDATE, #{servicePrice},  #{tradeNo})
	</insert>
	
	
	<select id="freelancerInfo" resultMap="freelancer1_rm">
		SELECT FREELANCER_NO ,MEMBER_NAME AS FREELANCER_NAME, MEMBER_PROFILE,
		GRADE_NAME,
		(SELECT LISTAGG(MAIN_CATEGORY_NO, ',')
			WITHIN GROUP (ORDER BY MAIN_CATEGORY_NO)
			FROM(SELECT DISTINCT MAIN_CATEGORY_NO
				FROM FIELD I
				WHERE F.FREELANCER_NO = I.FREELANCER_NO) ) FREELANCER_FIELD,
				 FREE_CONTACT_TIME1, FREE_CONTACT_TIME2,
				 FREELANCER_INTRODUCTION,
				 FREELANCER_PERIOD,
				 REGION_NAME
		FROM FREELANCER F 
		JOIN "MEMBER" ON(FREELANCER_NO=MEMBER_NO)
		JOIN GRADE USING(GRADE_NO)
		JOIN REGION USING(REGION_NO)
		WHERE FREELANCER_NO =#{freelancerNo}
	
	</select>
	
	<!-- 프리랜서 판매건수 들고 옴 -->
	   	<select  id="selectFreelancerSalesCoount" resultType="_int">
	   	SELECT NVL(SALE_COUNT,0) SALE_COUNT
			FROM FREELANCER
			LEFT JOIN (SELECT FREELANCER_NO,COUNT(*) SALE_COUNT
				FROM (SELECT * FROM SETTLEMENT
					JOIN TRADE USING(TRADE_NO)
					JOIN SERVICE USING(SERVICE_NO)
					--WHERE FREELANCER_NO = 30
					WHERE  WORK_STATUS IN (3)      
					AND PAYMENT_TYPE IN (3)
					AND USER_NO = FREELANCER_NO         
					UNION
					SELECT * 
					FROM SETTLEMENT
					JOIN TRADE USING(TRADE_NO)
					JOIN SERVICE USING(SERVICE_NO)
					--WHERE FREELANCER_NO = 30
					WHERE WORK_STATUS IN (2)   
					AND PAYMENT_TYPE IN (2))
				GROUP BY FREELANCER_NO) USING(FREELANCER_NO)
			WHERE FREELANCER_NO=#{freelancerNo}
	   	</select>
	   	
	   	
	 <select id="selectInquiryRate" resultType="_int">
	SELECT NVL(MESSAGE_RATE,0) INQUIRY_RATE
      FROM FREELANCER
      LEFT JOIN (SELECT ROUND(AVG(MESSAGE_RATE)*100) MESSAGE_RATE,FREELANCER_NO
         FROM (SELECT SERVICE_INQUIRY_NO,FREELANCER_NO,NVL(MESSAGE_RATE,0) MESSAGE_RATE
            FROM (SELECT 
               CASE WHEN SERVICE_INQUIRY_CREATE_DATE <![CDATA[<=]]> CHAT_SEND_TIME THEN 1
                   WHEN SERVICE_INQUIRY_CREATE_DATE >  CHAT_SEND_TIME THEN 0
               END AS MESSAGE_RATE,FREELANCER_NO FREELANCER_NO_MESSAGE,SERVICE_INQUIRY_NO
               FROM (SELECT *
                  FROM (SELECT SERVICE_NO,SERVICE_INQUIRY_NO,SERVICE_INQUIRY_CREATE_DATE,MEMBER_NO,FREELANCER_NO
                     FROM SERVICE_INQUIRY
                     JOIN SERVICE USING(SERVICE_NO))
                  LEFT JOIN (SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
                     FROM (SELECT * FROM (SELECT * 
                           FROM (SELECT c.*,FREELANCER.FREELANCER_NO,
                                 ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
                                 FROM CHAT c JOIN FREELANCER ON(SENDER_NO = FREELANCER_NO) WHERE SENDER_NO = FREELANCER_NO) WHERE rum = 1) JOIN FREELANCER USING(FREELANCER_NO))
                     JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
                     WHERE (CHAT_OPENMEM_NO = FREELANCER_NO OR CLIENT_NO = FREELANCER_NO)) ON (CHAT_OPENMEM_NO = FREELANCER_NO) 
                  WHERE (CLIENT_NO=MEMBER_NO)-----------------------
                  AND SERVICE_INQUIRY_CREATE_DATE BETWEEN FN_DT1 AND (ADD_MONTHS(FN_DT1, 6) - (1/86400))
                  UNION
                  SELECT *
                  FROM (SELECT SERVICE_NO,SERVICE_INQUIRY_NO,SERVICE_INQUIRY_CREATE_DATE,MEMBER_NO,FREELANCER_NO
                     FROM SERVICE_INQUIRY
                     JOIN SERVICE USING(SERVICE_NO))
                  JOIN (SELECT CHAT_ROOM_NO,CHAT_SEND_TIME,CHAT_OPENMEM_NO,CLIENT_NO
                     FROM (SELECT * FROM (SELECT * 
                           FROM (SELECT c.*,FREELANCER.FREELANCER_NO,
                                 ROW_NUMBER() OVER (PARTITION BY CHAT_ROOM_NO ORDER BY CHAT_SEND_TIME DESC) rum
                                 FROM CHAT c JOIN FREELANCER ON(SENDER_NO = FREELANCER_NO) WHERE SENDER_NO = FREELANCER_NO) WHERE rum = 1) JOIN FREELANCER USING(FREELANCER_NO))
                     JOIN CHAT_ROOM USING(CHAT_ROOM_NO)
                     WHERE (CHAT_OPENMEM_NO = FREELANCER_NO OR CLIENT_NO = FREELANCER_NO)) ON (CHAT_OPENMEM_NO = MEMBER_NO) 
                  WHERE (CLIENT_NO=FREELANCER_NO)
                  AND SERVICE_INQUIRY_CREATE_DATE BETWEEN FN_DT1 AND (ADD_MONTHS(FN_DT1, 6) - (1/86400))))
                  RIGHT JOIN (SELECT * FROM SERVICE_INQUIRY JOIN SERVICE USING(SERVICE_NO)) USING(SERVICE_INQUIRY_NO)) 
         GROUP BY FREELANCER_NO) USING(FREELANCER_NO)
         WHERE FREELANCER_NO=#{freelancerNo}
	
	</select>
	
	<select id="selectFServiceList" resultMap="fservice_rm">

			SELECT SERVICE_NO, SERVICE_TITLE ,SERVICE_SUMMARY,SERVICE_PRICE, SALE_COUNT,REVIEW_COUNT,REVIEW_POINT,REQUEST_FILE_PATH
		FROM (SELECT SERVICE_NO, SERVICE_TITLE ,SERVICE_SUMMARY,SERVICE_PRICE,FREELANCER_NO,
		(SELECT COUNT(*) FROM TRADE T
		WHERE MEMBER_DONE_FL = 2
		AND FREELANCER_DONE_FL = 2
		AND T.SERVICE_NO = S.SERVICE_NO) SALE_COUNT,
		(SELECT COUNT(*) FROM REVIEW R
		JOIN TRADE T ON(R.REVIEW_NO  = T.TRADE_NO)
		WHERE T.SERVICE_NO= S.SERVICE_NO) REVIEW_COUNT,
		(SELECT AVG(REVIEW_POINT) FROM REVIEW 
		JOIN TRADE T ON(TRADE_NO=REVIEW_NO)
		WHERE T.SERVICE_NO= S.SERVICE_NO) REVIEW_POINT
		FROM SERVICE S
		WHERE SERVICE_DEL_FL='N'
		AND SERVICE_STATUS=2 )
		LEFT JOIN (SELECT s.*, ROW_NUMBER() OVER (PARTITION BY SERVICE_NO ORDER BY REQUEST_FILE_NO) rum FROM SERVICE_FILE s) USING(SERVICE_NO)
		WHERE RUM = 1
		AND FREELANCER_NO=#{freelancerNo}
	</select>
    <select id="selectCareerList" resultMap="career_rm">
		SELECT * FROM CAREER
		WHERE FREELANCER_NO=#{freelancerNo}
	</select>
	<select id="selectLicenseList" resultMap="license_rm">
		 SELECT LICENSE_NAME ,TO_CHAR(LICENSE_DATE,'YYYY-MM-DD') LICENSE_DATE  ,LICENSE_AGENCY FROM LICENSE
		WHERE FREELANCER_NO=#{freelancerNo}
	</select>
	<select id="selectMajorList" resultMap="major_rm">
		SELECT * FROM MAJOR 
		WHERE FREELANCER_NO=#{freelancerNo}
	</select>
	<select id="selectPortfolioList" resultMap="portfolio_rm">
		SELECT * FROM PORTFOLIO
		WHERE FREELANCER_NO=#{freelancerNo}
	</select>
	
	<insert id="reportReview" parameterType="_int">
		INSERT INTO REPORT VALUES(SEQ_REPORT_NO.NEXTVAL, #{reviewNo},DEFAULT)
	
	</insert>
	
	<update id="updateReviewStatus" parameterType="_int">
		UPDATE REVIEW SET REVIEW_STATUS='2' WHERE REVIEW_NO=#{reviewNo}
	
	</update>
	<insert id="writeComment" parameterType="map">
		INSERT INTO REVIEW_COMMENT VALUES(#{reviewNo},#{reviewContent},DEFAULT)
	
	</insert>
	
	<select id="selectTrade" resultMap="trade_rm">
			SELECT SERVICE_TITLE,SERVICE_SUMMARY, SERVICE_PRICE,REQUEST_FILE_PATH,
		TRADE_REQUEST  FROM TRADE 
	JOIN SERVICE USING(SERVICE_NO)
LEFT JOIN (SELECT s.*, ROW_NUMBER() OVER (PARTITION BY SERVICE_NO ORDER BY REQUEST_FILE_NO) rum FROM SERVICE_FILE s) USING(SERVICE_NO)
		WHERE RUM = 1
	AND TRADE_NO=#{tradeNo}
	</select>
	
	
	
 	
 </mapper>
